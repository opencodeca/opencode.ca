{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.regexp.to-string.js","webpack:///./node_modules/core-js/modules/es6.regexp.flags.js","webpack:///./node_modules/core-js/modules/es6.regexp.constructor.js","webpack:///./node_modules/core-js/modules/_inherit-if-required.js","webpack:///./node_modules/core-js/modules/_set-proto.js","webpack:///./node_modules/core-js/modules/_object-gopd.js","webpack:///./node_modules/core-js/modules/_object-gopn.js","webpack:///./node_modules/intl/index.js","webpack:///./node_modules/intl/lib/core.js","webpack:///./node_modules/core-js/modules/es6.function.name.js"],"names":["__webpack_require__","anObject","$flags","DESCRIPTORS","$toString","define","fn","RegExp","prototype","call","source","flags","R","this","concat","undefined","name","f","configurable","get","global","inheritIfRequired","dP","gOPN","isRegExp","$RegExp","Base","proto","re1","re2","CORRECT_NEW","p","tiRE","piRE","fiU","constructor","proxy","key","set","it","keys","i","length","isObject","setPrototypeOf","module","exports","that","target","C","P","S","check","O","TypeError","Object","test","buggy","Function","Array","e","__proto__","pIE","createDesc","toIObject","toPrimitive","has","IE8_DOM_DEFINE","gOPD","getOwnPropertyDescriptor","$keys","hiddenKeys","getOwnPropertyNames","IntlPolyfill","Intl","__applyLocaleSensitivePrototypes","REACT_ELEMENT_TYPE","_typeof","Symbol","iterator","obj","jsx","for","type","props","children","defaultProps","childrenLength","arguments","propName","childArray","$$typeof","ref","_owner","createClass","defineProperties","descriptor","enumerable","writable","defineProperty","Constructor","protoProps","staticProps","defineProperty$1","value","_extends","assign","hasOwnProperty","selfGlobal","self","slicedToArray","arr","isArray","_arr","_n","_d","_e","_s","_i","next","done","push","err","sliceIterator","babelHelpers$1","freeze","asyncToGenerator","gen","apply","Promise","resolve","reject","step","arg","info","error","then","classCallCheck","instance","defineEnumerableProperties","descs","desc","defaults","object","property","receiver","parent","getPrototypeOf","getter","inherits","subClass","superClass","create","interopRequireDefault","__esModule","default","interopRequireWildcard","newObj","newArrowCheck","innerThis","boundThis","objectDestructuringEmpty","objectWithoutProperties","indexOf","possibleConstructorReturn","ReferenceError","setter","slicedToArrayLoose","_step","_iterator","taggedTemplateLiteral","strings","raw","taggedTemplateLiteralLoose","temporalRef","val","undef","temporalUndefined","toArray","from","toConsumableArray","arr2","typeof","extends","instanceof","left","right","hasInstance","realDefineProp","sentinel","a","es3","__defineGetter__","hop","arrIndexOf","search","t","max","objCreate","F","k","arrSlice","slice","arrConcat","arrPush","arrJoin","join","arrShift","shift","fnBind","bind","thisObj","args","internals","secret","Math","random","Record","List","createRegExpRestore","disableRegExpRestore","regExpCache","lastMatch","leftContext","multiline","input","esc","lm","replace","reg","m","exprStr","match","expr","lastIndex","exec","toObject","toNumber","Number","toLength","len","number","isNaN","floor","abs","toInteger","Infinity","pow","min","getInternalProperties","__getInternalProperties","variant","extension","singleton","expBCP47Syntax","expVariantDupes","expSingletonDupes","expExtSequences","defaultLocale","redundantTags","tags","art-lojban","i-ami","i-bnn","i-hak","i-klingon","i-lux","i-navajo","i-pwn","i-tao","i-tay","i-tsu","no-bok","no-nyn","sgn-BE-FR","sgn-BE-NL","sgn-CH-DE","zh-guoyu","zh-hakka","zh-min-nan","zh-xiang","sgn-BR","sgn-CO","sgn-DE","sgn-DK","sgn-ES","sgn-FR","sgn-GB","sgn-GR","sgn-IE","sgn-IT","sgn-JP","sgn-MX","sgn-NI","sgn-NL","sgn-NO","sgn-PT","sgn-SE","sgn-US","sgn-ZA","zh-cmn","zh-cmn-Hans","zh-cmn-Hant","zh-gan","zh-wuu","zh-yue","subtags","BU","DD","FX","TP","YD","ZR","heploc","in","iw","ji","jw","mo","ayx","bjd","ccq","cjr","cka","cmk","drh","drw","gav","hrr","ibi","kgh","lcq","mst","myt","sca","tie","tkk","tlw","tnf","ybd","yma","extLang","aao","abh","abv","acm","acq","acw","acx","acy","adf","ads","aeb","aec","aed","aen","afb","afg","ajp","apc","apd","arb","arq","ars","ary","arz","ase","asf","asp","asq","asw","auz","avl","ayh","ayl","ayn","ayp","bbz","bfi","bfk","bjn","bog","bqn","bqy","btj","bve","bvl","bvu","bzs","cdo","cds","cjy","cmn","coa","cpx","csc","csd","cse","csf","csg","csl","csn","csq","csr","czh","czo","doq","dse","dsl","dup","ecs","esl","esn","eso","eth","fcs","fse","fsl","fss","gan","gds","gom","gse","gsg","gsm","gss","gus","hab","haf","hak","hds","hji","hks","hos","hps","hsh","hsl","hsn","icl","ils","inl","ins","ise","isg","isr","jak","jax","jcs","jhs","jls","jos","jsl","jus","kgi","knn","kvb","kvk","kvr","kxd","lbs","lce","lcf","liw","lls","lsg","lsl","lso","lsp","lst","lsy","ltg","lvs","lzh","mdl","meo","mfa","mfb","mfs","mnp","mqg","mre","msd","msi","msr","mui","mzc","mzg","mzy","nan","nbs","ncs","nsi","nsl","nsp","nsr","nzs","okl","orn","ors","pel","pga","pks","prl","prz","psc","psd","pse","psg","psl","pso","psp","psr","pys","rms","rsi","rsl","sdl","sfb","sfs","sgg","sgx","shu","slf","sls","sqk","sqs","ssh","ssp","ssr","svk","swc","swh","swl","syy","tmw","tse","tsm","tsq","tss","tsy","tza","ugn","ugy","ukl","uks","urk","uzn","uzs","vgt","vkk","vkt","vsi","vsl","vsv","wuu","xki","xml","xmm","xms","yds","ysl","yue","zib","zlm","zmi","zsl","zsm","toLatinUpperCase","str","ch","charAt","toUpperCase","IsStructurallyValidLanguageTag","locale","CanonicalizeLanguageTag","parts","toLowerCase","split","sort","_max","expCurrencyCode","expUnicodeExSeq","CanonicalizeLocaleList","locales","seen","Pk","String","kValue","tag","RangeError","BestAvailableLocale","availableLocales","candidate","pos","lastIndexOf","substring","LookupMatcher","requestedLocales","availableLocale","noExtensionsLocale","result","extensionIndex","ResolveLocale","options","relevantExtensionKeys","localeData","r","foundLocale","BestFitMatcher","extensionSubtags","extensionSubtagsLength","supportedExtension","keyLocaleData","supportedExtensionAddition","keyPos","requestedValue","optionsValue","privateIndex","preExtension","postExtension","LookupSupportedLocales","subset","SupportedLocales","matcher","localeMatcher","BestFitSupportedLocales","GetOption","values","fallback","Boolean","GetNumberOption","minimum","maximum","ll","currencyMinorUnits","BHD","BYR","XOF","BIF","XAF","CLF","CLP","KMF","DJF","XPF","GNF","ISK","IQD","JPY","JOD","KRW","KWD","LYD","OMR","PYG","RWF","TND","UGX","UYI","VUV","VND","NumberFormatConstructor","numberFormat","internal","regexpRestore","opt","NumberFormat","dataLocale","s","c","currency","normalized","cDigits","CurrencyDigits","cd","mnid","mnfd","mxfdDefault","mxfd","mnsd","minimumSignificantDigits","mxsd","maximumSignificantDigits","g","stylePatterns","patterns","positivePattern","negativePattern","format","GetFormatNumber","InitializeNumberFormat","bf","FormatNumber","PartitionNumberPattern","x","nums","data","ild","symbols","latn","pattern","beginIndex","endIndex","nextIndex","Error","literal","[[type]]","[[value]]","n","isFinite","_n2","ToRawPrecision","ToRawFixed","numSys","digits","digit","integer","fraction","decimalSepIndex","groupSepSymbol","group","groups","pgSize","primaryGroupSize","sgSize","secondaryGroupSize","end","idx","start","integerGroup","decimalSepSymbol","decimal","infinity","plusSignSymbol","plusSign","minusSignSymbol","minusSign","percentSignSymbol","percentSign","currencies","_literal","_literal2","minPrecision","maxPrecision","log10","round","log","LOG10E","log10Floor","exp","LN10","cut","minInteger","minFraction","maxFraction","toFixed","int","b","[[availableLocales]]","[[relevantExtensionKeys]]","[[localeData]]","part","FormatNumberToParts","arab","arabext","bali","beng","deva","fullwide","gujr","guru","hanidec","khmr","knda","laoo","limb","mlym","mong","mymr","orya","tamldec","telu","thai","tibt","prop","expDTComponents","expPatternTrimmer","unwantedDTCs","dtKeys","tmKeys","isDateFormatOnly","isTimeFormatOnly","joinDateAndTimeFormats","dateFormatObj","timeFormatObj","o","_","j","computeFinalPatterns","formatObj","pattern12","extendedPattern","$0","expDTComponentsMeta","era","year","quarter","month","week","day","weekday","hour12","hour","minute","second","timeZoneName","createDateTimeFormat","skeleton","originalPattern","validSyntheticProps","numeric","2-digit","narrow","short","long","dateWidths","resolveDateString","ca","component","width","gregory","alts","resolved","DateTimeFormatConstructor","dateTimeFormat","ToDateTimeOptions","DateTimeFormat","tz","timeZone","dateTimeComponents","bestFormat","dataLocaleData","formats","toString","availableFormats","timeFormats","dateFormats","computed","timeRelatedFormats","dateRelatedFormats","full","medium","createDateTimeFormats","ToDateTimeFormats","bestScore","score","optionsProp","formatProp","optionsPropIndex","formatPropIndex","delta","BasicFormatMatcher","_hr","optionsPropNames","_bestFormat","propValue","_ref2","generateSyntheticFormat","_property","patternProp","BestFitFormatMatcher","_prop","hr12","hourNo0","GetFormatDateTime","InitializeDateTimeFormat","required","opt2","needDefaults","date","FormatDateTime","Date","now","CreateDateTimeParts","d","nf","useGrouping","nf2","minimumIntegerDigits","tm","[[weekday]]","[[era]]","[[year]]","[[month]]","[[day]]","[[hour]]","[[minute]]","[[second]]","[[inDST]]","index","calendars","fv","v","substr","FormatToPartsDateTime","ls","__localeSensitiveProtos","toLocaleString","toLocaleDateString","toLocaleTimeString","nu","setDefaultLocale","addLocaleData","FProto","nameRE"],"mappings":"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C,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,cACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,aACAC,IAAA,cACAC,IAAA,aACAC,IAAA,cACAC,IAAA,aACAC,IAAA,cACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,aACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,cACAC,IAAA,aACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,aACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,cACAC,IAAA,aACAC,IAAA,aACAC,IAAA,cACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC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","file":"7-005b0c95fb49039fdbad.js","sourcesContent":["'use strict';\nrequire('./es6.regexp.flags');\nvar anObject = require('./_an-object');\nvar $flags = require('./_flags');\nvar DESCRIPTORS = require('./_descriptors');\nvar TO_STRING = 'toString';\nvar $toString = /./[TO_STRING];\n\nvar define = function (fn) {\n  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);\n};\n\n// 21.2.5.14 RegExp.prototype.toString()\nif (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {\n  define(function toString() {\n    var R = anObject(this);\n    return '/'.concat(R.source, '/',\n      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);\n  });\n// FF44- RegExp#toString has a wrong name\n} else if ($toString.name != TO_STRING) {\n  define(function toString() {\n    return $toString.call(this);\n  });\n}\n","// 21.2.5.3 get RegExp.prototype.flags()\nif (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {\n  configurable: true,\n  get: require('./_flags')\n});\n","var global = require('./_global');\nvar inheritIfRequired = require('./_inherit-if-required');\nvar dP = require('./_object-dp').f;\nvar gOPN = require('./_object-gopn').f;\nvar isRegExp = require('./_is-regexp');\nvar $flags = require('./_flags');\nvar $RegExp = global.RegExp;\nvar Base = $RegExp;\nvar proto = $RegExp.prototype;\nvar re1 = /a/g;\nvar re2 = /a/g;\n// \"new\" creates a new object, old webkit buggy here\nvar CORRECT_NEW = new $RegExp(re1) !== re1;\n\nif (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {\n  re2[require('./_wks')('match')] = false;\n  // RegExp constructor can alter flags and IsRegExp works correct with @@match\n  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';\n}))) {\n  $RegExp = function RegExp(p, f) {\n    var tiRE = this instanceof $RegExp;\n    var piRE = isRegExp(p);\n    var fiU = f === undefined;\n    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p\n      : inheritIfRequired(CORRECT_NEW\n        ? new Base(piRE && !fiU ? p.source : p, f)\n        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)\n      , tiRE ? this : proto, $RegExp);\n  };\n  var proxy = function (key) {\n    key in $RegExp || dP($RegExp, key, {\n      configurable: true,\n      get: function () { return Base[key]; },\n      set: function (it) { Base[key] = it; }\n    });\n  };\n  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);\n  proto.constructor = $RegExp;\n  $RegExp.prototype = proto;\n  require('./_redefine')(global, 'RegExp', $RegExp);\n}\n\nrequire('./_set-species')('RegExp');\n","var isObject = require('./_is-object');\nvar setPrototypeOf = require('./_set-proto').set;\nmodule.exports = function (that, target, C) {\n  var S = target.constructor;\n  var P;\n  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {\n    setPrototypeOf(that, P);\n  } return that;\n};\n","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n","var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n","// Expose `IntlPolyfill` as global to add locale data into runtime later on.\nglobal.IntlPolyfill = require('./lib/core.js');\n\n// Require all locale data for `Intl`. This module will be\n// ignored when bundling for the browser with Browserify/Webpack.\nrequire('./locale-data/complete.js');\n\n// hack to export the polyfill as global Intl if needed\nif (!global.Intl) {\n    global.Intl = global.IntlPolyfill;\n    global.IntlPolyfill.__applyLocaleSensitivePrototypes();\n}\n\n// providing an idiomatic api for the nodejs version of this module\nmodule.exports = global.IntlPolyfill;\n","'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n};\n\nvar jsx = function () {\n  var REACT_ELEMENT_TYPE = typeof Symbol === \"function\" && Symbol.for && Symbol.for(\"react.element\") || 0xeac7;\n  return function createRawReactElement(type, props, key, children) {\n    var defaultProps = type && type.defaultProps;\n    var childrenLength = arguments.length - 3;\n\n    if (!props && childrenLength !== 0) {\n      props = {};\n    }\n\n    if (props && defaultProps) {\n      for (var propName in defaultProps) {\n        if (props[propName] === void 0) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    } else if (!props) {\n      props = defaultProps || {};\n    }\n\n    if (childrenLength === 1) {\n      props.children = children;\n    } else if (childrenLength > 1) {\n      var childArray = Array(childrenLength);\n\n      for (var i = 0; i < childrenLength; i++) {\n        childArray[i] = arguments[i + 3];\n      }\n\n      props.children = childArray;\n    }\n\n    return {\n      $$typeof: REACT_ELEMENT_TYPE,\n      type: type,\n      key: key === undefined ? null : '' + key,\n      ref: null,\n      props: props,\n      _owner: null\n    };\n  };\n}();\n\nvar asyncToGenerator = function (fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            return step(\"next\", value);\n          }, function (err) {\n            return step(\"throw\", err);\n          });\n        }\n      }\n\n      return step(\"next\");\n    });\n  };\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar defineEnumerableProperties = function (obj, descs) {\n  for (var key in descs) {\n    var desc = descs[key];\n    desc.configurable = desc.enumerable = true;\n    if (\"value\" in desc) desc.writable = true;\n    Object.defineProperty(obj, key, desc);\n  }\n\n  return obj;\n};\n\nvar defaults = function (obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n};\n\nvar defineProperty$1 = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar _instanceof = function (left, right) {\n  if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n    return right[Symbol.hasInstance](left);\n  } else {\n    return left instanceof right;\n  }\n};\n\nvar interopRequireDefault = function (obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n};\n\nvar interopRequireWildcard = function (obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n};\n\nvar newArrowCheck = function (innerThis, boundThis) {\n  if (innerThis !== boundThis) {\n    throw new TypeError(\"Cannot instantiate an arrow function\");\n  }\n};\n\nvar objectDestructuringEmpty = function (obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n};\n\nvar objectWithoutProperties = function (obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar selfGlobal = typeof global === \"undefined\" ? self : global;\n\nvar set = function set(object, property, value, receiver) {\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent !== null) {\n      set(parent, property, value, receiver);\n    }\n  } else if (\"value\" in desc && desc.writable) {\n    desc.value = value;\n  } else {\n    var setter = desc.set;\n\n    if (setter !== undefined) {\n      setter.call(receiver, value);\n    }\n  }\n\n  return value;\n};\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar slicedToArrayLoose = function (arr, i) {\n  if (Array.isArray(arr)) {\n    return arr;\n  } else if (Symbol.iterator in Object(arr)) {\n    var _arr = [];\n\n    for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {\n      _arr.push(_step.value);\n\n      if (i && _arr.length === i) break;\n    }\n\n    return _arr;\n  } else {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n  }\n};\n\nvar taggedTemplateLiteral = function (strings, raw) {\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n};\n\nvar taggedTemplateLiteralLoose = function (strings, raw) {\n  strings.raw = raw;\n  return strings;\n};\n\nvar temporalRef = function (val, name, undef) {\n  if (val === undef) {\n    throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n  } else {\n    return val;\n  }\n};\n\nvar temporalUndefined = {};\n\nvar toArray = function (arr) {\n  return Array.isArray(arr) ? arr : Array.from(arr);\n};\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\n\n\nvar babelHelpers$1 = Object.freeze({\n  jsx: jsx,\n  asyncToGenerator: asyncToGenerator,\n  classCallCheck: classCallCheck,\n  createClass: createClass,\n  defineEnumerableProperties: defineEnumerableProperties,\n  defaults: defaults,\n  defineProperty: defineProperty$1,\n  get: get,\n  inherits: inherits,\n  interopRequireDefault: interopRequireDefault,\n  interopRequireWildcard: interopRequireWildcard,\n  newArrowCheck: newArrowCheck,\n  objectDestructuringEmpty: objectDestructuringEmpty,\n  objectWithoutProperties: objectWithoutProperties,\n  possibleConstructorReturn: possibleConstructorReturn,\n  selfGlobal: selfGlobal,\n  set: set,\n  slicedToArray: slicedToArray,\n  slicedToArrayLoose: slicedToArrayLoose,\n  taggedTemplateLiteral: taggedTemplateLiteral,\n  taggedTemplateLiteralLoose: taggedTemplateLiteralLoose,\n  temporalRef: temporalRef,\n  temporalUndefined: temporalUndefined,\n  toArray: toArray,\n  toConsumableArray: toConsumableArray,\n  typeof: _typeof,\n  extends: _extends,\n  instanceof: _instanceof\n});\n\nvar realDefineProp = function () {\n    var sentinel = function sentinel() {};\n    try {\n        Object.defineProperty(sentinel, 'a', {\n            get: function get() {\n                return 1;\n            }\n        });\n        Object.defineProperty(sentinel, 'prototype', { writable: false });\n        return sentinel.a === 1 && sentinel.prototype instanceof Object;\n    } catch (e) {\n        return false;\n    }\n}();\n\n// Need a workaround for getters in ES3\nvar es3 = !realDefineProp && !Object.prototype.__defineGetter__;\n\n// We use this a lot (and need it for proto-less objects)\nvar hop = Object.prototype.hasOwnProperty;\n\n// Naive defineProperty for compatibility\nvar defineProperty = realDefineProp ? Object.defineProperty : function (obj, name, desc) {\n    if ('get' in desc && obj.__defineGetter__) obj.__defineGetter__(name, desc.get);else if (!hop.call(obj, name) || 'value' in desc) obj[name] = desc.value;\n};\n\n// Array.prototype.indexOf, as good as we need it to be\nvar arrIndexOf = Array.prototype.indexOf || function (search) {\n    /*jshint validthis:true */\n    var t = this;\n    if (!t.length) return -1;\n\n    for (var i = arguments[1] || 0, max = t.length; i < max; i++) {\n        if (t[i] === search) return i;\n    }\n\n    return -1;\n};\n\n// Create an object with the specified prototype (2nd arg required for Record)\nvar objCreate = Object.create || function (proto, props) {\n    var obj = void 0;\n\n    function F() {}\n    F.prototype = proto;\n    obj = new F();\n\n    for (var k in props) {\n        if (hop.call(props, k)) defineProperty(obj, k, props[k]);\n    }\n\n    return obj;\n};\n\n// Snapshot some (hopefully still) native built-ins\nvar arrSlice = Array.prototype.slice;\nvar arrConcat = Array.prototype.concat;\nvar arrPush = Array.prototype.push;\nvar arrJoin = Array.prototype.join;\nvar arrShift = Array.prototype.shift;\n\n// Naive Function.prototype.bind for compatibility\nvar fnBind = Function.prototype.bind || function (thisObj) {\n    var fn = this,\n        args = arrSlice.call(arguments, 1);\n\n    // All our (presently) bound functions have either 1 or 0 arguments. By returning\n    // different function signatures, we can pass some tests in ES3 environments\n    if (fn.length === 1) {\n        return function () {\n            return fn.apply(thisObj, arrConcat.call(args, arrSlice.call(arguments)));\n        };\n    }\n    return function () {\n        return fn.apply(thisObj, arrConcat.call(args, arrSlice.call(arguments)));\n    };\n};\n\n// Object housing internal properties for constructors\nvar internals = objCreate(null);\n\n// Keep internal properties internal\nvar secret = Math.random();\n\n// Helper functions\n// ================\n\n/**\n * A function to deal with the inaccuracy of calculating log10 in pre-ES6\n * JavaScript environments. Math.log(num) / Math.LN10 was responsible for\n * causing issue #62.\n */\nfunction log10Floor(n) {\n    // ES6 provides the more accurate Math.log10\n    if (typeof Math.log10 === 'function') return Math.floor(Math.log10(n));\n\n    var x = Math.round(Math.log(n) * Math.LOG10E);\n    return x - (Number('1e' + x) > n);\n}\n\n/**\n * A map that doesn't contain Object in its prototype chain\n */\nfunction Record(obj) {\n    // Copy only own properties over unless this object is already a Record instance\n    for (var k in obj) {\n        if (obj instanceof Record || hop.call(obj, k)) defineProperty(this, k, { value: obj[k], enumerable: true, writable: true, configurable: true });\n    }\n}\nRecord.prototype = objCreate(null);\n\n/**\n * An ordered list\n */\nfunction List() {\n    defineProperty(this, 'length', { writable: true, value: 0 });\n\n    if (arguments.length) arrPush.apply(this, arrSlice.call(arguments));\n}\nList.prototype = objCreate(null);\n\n/**\n * Constructs a regular expression to restore tainted RegExp properties\n */\nfunction createRegExpRestore() {\n    if (internals.disableRegExpRestore) {\n        return function () {/* no-op */};\n    }\n\n    var regExpCache = {\n        lastMatch: RegExp.lastMatch || '',\n        leftContext: RegExp.leftContext,\n        multiline: RegExp.multiline,\n        input: RegExp.input\n    },\n        has = false;\n\n    // Create a snapshot of all the 'captured' properties\n    for (var i = 1; i <= 9; i++) {\n        has = (regExpCache['$' + i] = RegExp['$' + i]) || has;\n    }return function () {\n        // Now we've snapshotted some properties, escape the lastMatch string\n        var esc = /[.?*+^$[\\]\\\\(){}|-]/g,\n            lm = regExpCache.lastMatch.replace(esc, '\\\\$&'),\n            reg = new List();\n\n        // If any of the captured strings were non-empty, iterate over them all\n        if (has) {\n            for (var _i = 1; _i <= 9; _i++) {\n                var m = regExpCache['$' + _i];\n\n                // If it's empty, add an empty capturing group\n                if (!m) lm = '()' + lm;\n\n                // Else find the string in lm and escape & wrap it to capture it\n                else {\n                        m = m.replace(esc, '\\\\$&');\n                        lm = lm.replace(m, '(' + m + ')');\n                    }\n\n                // Push it to the reg and chop lm to make sure further groups come after\n                arrPush.call(reg, lm.slice(0, lm.indexOf('(') + 1));\n                lm = lm.slice(lm.indexOf('(') + 1);\n            }\n        }\n\n        var exprStr = arrJoin.call(reg, '') + lm;\n\n        // Shorten the regex by replacing each part of the expression with a match\n        // for a string of that exact length.  This is safe for the type of\n        // expressions generated above, because the expression matches the whole\n        // match string, so we know each group and each segment between capturing\n        // groups can be matched by its length alone.\n        exprStr = exprStr.replace(/(\\\\\\(|\\\\\\)|[^()])+/g, function (match) {\n            return '[\\\\s\\\\S]{' + match.replace('\\\\', '').length + '}';\n        });\n\n        // Create the regular expression that will reconstruct the RegExp properties\n        var expr = new RegExp(exprStr, regExpCache.multiline ? 'gm' : 'g');\n\n        // Set the lastIndex of the generated expression to ensure that the match\n        // is found in the correct index.\n        expr.lastIndex = regExpCache.leftContext.length;\n\n        expr.exec(regExpCache.input);\n    };\n}\n\n/**\n * Mimics ES5's abstract ToObject() function\n */\nfunction toObject(arg) {\n    if (arg === null) throw new TypeError('Cannot convert null or undefined to object');\n\n    if ((typeof arg === 'undefined' ? 'undefined' : babelHelpers$1['typeof'](arg)) === 'object') return arg;\n    return Object(arg);\n}\n\nfunction toNumber(arg) {\n    if (typeof arg === 'number') return arg;\n    return Number(arg);\n}\n\nfunction toInteger(arg) {\n    var number = toNumber(arg);\n    if (isNaN(number)) return 0;\n    if (number === +0 || number === -0 || number === +Infinity || number === -Infinity) return number;\n    if (number < 0) return Math.floor(Math.abs(number)) * -1;\n    return Math.floor(Math.abs(number));\n}\n\nfunction toLength(arg) {\n    var len = toInteger(arg);\n    if (len <= 0) return 0;\n    if (len === Infinity) return Math.pow(2, 53) - 1;\n    return Math.min(len, Math.pow(2, 53) - 1);\n}\n\n/**\n * Returns \"internal\" properties for an object\n */\nfunction getInternalProperties(obj) {\n    if (hop.call(obj, '__getInternalProperties')) return obj.__getInternalProperties(secret);\n\n    return objCreate(null);\n}\n\n/**\n* Defines regular expressions for various operations related to the BCP 47 syntax,\n* as defined at http://tools.ietf.org/html/bcp47#section-2.1\n*/\n\n// extlang       = 3ALPHA              ; selected ISO 639 codes\n//                 *2(\"-\" 3ALPHA)      ; permanently reserved\nvar extlang = '[a-z]{3}(?:-[a-z]{3}){0,2}';\n\n// language      = 2*3ALPHA            ; shortest ISO 639 code\n//                 [\"-\" extlang]       ; sometimes followed by\n//                                     ; extended language subtags\n//               / 4ALPHA              ; or reserved for future use\n//               / 5*8ALPHA            ; or registered language subtag\nvar language = '(?:[a-z]{2,3}(?:-' + extlang + ')?|[a-z]{4}|[a-z]{5,8})';\n\n// script        = 4ALPHA              ; ISO 15924 code\nvar script = '[a-z]{4}';\n\n// region        = 2ALPHA              ; ISO 3166-1 code\n//               / 3DIGIT              ; UN M.49 code\nvar region = '(?:[a-z]{2}|\\\\d{3})';\n\n// variant       = 5*8alphanum         ; registered variants\n//               / (DIGIT 3alphanum)\nvar variant = '(?:[a-z0-9]{5,8}|\\\\d[a-z0-9]{3})';\n\n//                                     ; Single alphanumerics\n//                                     ; \"x\" reserved for private use\n// singleton     = DIGIT               ; 0 - 9\n//               / %x41-57             ; A - W\n//               / %x59-5A             ; Y - Z\n//               / %x61-77             ; a - w\n//               / %x79-7A             ; y - z\nvar singleton = '[0-9a-wy-z]';\n\n// extension     = singleton 1*(\"-\" (2*8alphanum))\nvar extension = singleton + '(?:-[a-z0-9]{2,8})+';\n\n// privateuse    = \"x\" 1*(\"-\" (1*8alphanum))\nvar privateuse = 'x(?:-[a-z0-9]{1,8})+';\n\n// irregular     = \"en-GB-oed\"         ; irregular tags do not match\n//               / \"i-ami\"             ; the 'langtag' production and\n//               / \"i-bnn\"             ; would not otherwise be\n//               / \"i-default\"         ; considered 'well-formed'\n//               / \"i-enochian\"        ; These tags are all valid,\n//               / \"i-hak\"             ; but most are deprecated\n//               / \"i-klingon\"         ; in favor of more modern\n//               / \"i-lux\"             ; subtags or subtag\n//               / \"i-mingo\"           ; combination\n//               / \"i-navajo\"\n//               / \"i-pwn\"\n//               / \"i-tao\"\n//               / \"i-tay\"\n//               / \"i-tsu\"\n//               / \"sgn-BE-FR\"\n//               / \"sgn-BE-NL\"\n//               / \"sgn-CH-DE\"\nvar irregular = '(?:en-GB-oed' + '|i-(?:ami|bnn|default|enochian|hak|klingon|lux|mingo|navajo|pwn|tao|tay|tsu)' + '|sgn-(?:BE-FR|BE-NL|CH-DE))';\n\n// regular       = \"art-lojban\"        ; these tags match the 'langtag'\n//               / \"cel-gaulish\"       ; production, but their subtags\n//               / \"no-bok\"            ; are not extended language\n//               / \"no-nyn\"            ; or variant subtags: their meaning\n//               / \"zh-guoyu\"          ; is defined by their registration\n//               / \"zh-hakka\"          ; and all of these are deprecated\n//               / \"zh-min\"            ; in favor of a more modern\n//               / \"zh-min-nan\"        ; subtag or sequence of subtags\n//               / \"zh-xiang\"\nvar regular = '(?:art-lojban|cel-gaulish|no-bok|no-nyn' + '|zh-(?:guoyu|hakka|min|min-nan|xiang))';\n\n// grandfathered = irregular           ; non-redundant tags registered\n//               / regular             ; during the RFC 3066 era\nvar grandfathered = '(?:' + irregular + '|' + regular + ')';\n\n// langtag       = language\n//                 [\"-\" script]\n//                 [\"-\" region]\n//                 *(\"-\" variant)\n//                 *(\"-\" extension)\n//                 [\"-\" privateuse]\nvar langtag = language + '(?:-' + script + ')?(?:-' + region + ')?(?:-' + variant + ')*(?:-' + extension + ')*(?:-' + privateuse + ')?';\n\n// Language-Tag  = langtag             ; normal language tags\n//               / privateuse          ; private use tag\n//               / grandfathered       ; grandfathered tags\nvar expBCP47Syntax = RegExp('^(?:' + langtag + '|' + privateuse + '|' + grandfathered + ')$', 'i');\n\n// Match duplicate variants in a language tag\nvar expVariantDupes = RegExp('^(?!x).*?-(' + variant + ')-(?:\\\\w{4,8}-(?!x-))*\\\\1\\\\b', 'i');\n\n// Match duplicate singletons in a language tag (except in private use)\nvar expSingletonDupes = RegExp('^(?!x).*?-(' + singleton + ')-(?:\\\\w+-(?!x-))*\\\\1\\\\b', 'i');\n\n// Match all extension sequences\nvar expExtSequences = RegExp('-' + extension, 'ig');\n\n// Default locale is the first-added locale data for us\nvar defaultLocale = void 0;\nfunction setDefaultLocale(locale) {\n    defaultLocale = locale;\n}\n\n// IANA Subtag Registry redundant tag and subtag maps\nvar redundantTags = {\n    tags: {\n        \"art-lojban\": \"jbo\",\n        \"i-ami\": \"ami\",\n        \"i-bnn\": \"bnn\",\n        \"i-hak\": \"hak\",\n        \"i-klingon\": \"tlh\",\n        \"i-lux\": \"lb\",\n        \"i-navajo\": \"nv\",\n        \"i-pwn\": \"pwn\",\n        \"i-tao\": \"tao\",\n        \"i-tay\": \"tay\",\n        \"i-tsu\": \"tsu\",\n        \"no-bok\": \"nb\",\n        \"no-nyn\": \"nn\",\n        \"sgn-BE-FR\": \"sfb\",\n        \"sgn-BE-NL\": \"vgt\",\n        \"sgn-CH-DE\": \"sgg\",\n        \"zh-guoyu\": \"cmn\",\n        \"zh-hakka\": \"hak\",\n        \"zh-min-nan\": \"nan\",\n        \"zh-xiang\": \"hsn\",\n        \"sgn-BR\": \"bzs\",\n        \"sgn-CO\": \"csn\",\n        \"sgn-DE\": \"gsg\",\n        \"sgn-DK\": \"dsl\",\n        \"sgn-ES\": \"ssp\",\n        \"sgn-FR\": \"fsl\",\n        \"sgn-GB\": \"bfi\",\n        \"sgn-GR\": \"gss\",\n        \"sgn-IE\": \"isg\",\n        \"sgn-IT\": \"ise\",\n        \"sgn-JP\": \"jsl\",\n        \"sgn-MX\": \"mfs\",\n        \"sgn-NI\": \"ncs\",\n        \"sgn-NL\": \"dse\",\n        \"sgn-NO\": \"nsl\",\n        \"sgn-PT\": \"psr\",\n        \"sgn-SE\": \"swl\",\n        \"sgn-US\": \"ase\",\n        \"sgn-ZA\": \"sfs\",\n        \"zh-cmn\": \"cmn\",\n        \"zh-cmn-Hans\": \"cmn-Hans\",\n        \"zh-cmn-Hant\": \"cmn-Hant\",\n        \"zh-gan\": \"gan\",\n        \"zh-wuu\": \"wuu\",\n        \"zh-yue\": \"yue\"\n    },\n    subtags: {\n        BU: \"MM\",\n        DD: \"DE\",\n        FX: \"FR\",\n        TP: \"TL\",\n        YD: \"YE\",\n        ZR: \"CD\",\n        heploc: \"alalc97\",\n        'in': \"id\",\n        iw: \"he\",\n        ji: \"yi\",\n        jw: \"jv\",\n        mo: \"ro\",\n        ayx: \"nun\",\n        bjd: \"drl\",\n        ccq: \"rki\",\n        cjr: \"mom\",\n        cka: \"cmr\",\n        cmk: \"xch\",\n        drh: \"khk\",\n        drw: \"prs\",\n        gav: \"dev\",\n        hrr: \"jal\",\n        ibi: \"opa\",\n        kgh: \"kml\",\n        lcq: \"ppr\",\n        mst: \"mry\",\n        myt: \"mry\",\n        sca: \"hle\",\n        tie: \"ras\",\n        tkk: \"twm\",\n        tlw: \"weo\",\n        tnf: \"prs\",\n        ybd: \"rki\",\n        yma: \"lrr\"\n    },\n    extLang: {\n        aao: [\"aao\", \"ar\"],\n        abh: [\"abh\", \"ar\"],\n        abv: [\"abv\", \"ar\"],\n        acm: [\"acm\", \"ar\"],\n        acq: [\"acq\", \"ar\"],\n        acw: [\"acw\", \"ar\"],\n        acx: [\"acx\", \"ar\"],\n        acy: [\"acy\", \"ar\"],\n        adf: [\"adf\", \"ar\"],\n        ads: [\"ads\", \"sgn\"],\n        aeb: [\"aeb\", \"ar\"],\n        aec: [\"aec\", \"ar\"],\n        aed: [\"aed\", \"sgn\"],\n        aen: [\"aen\", \"sgn\"],\n        afb: [\"afb\", \"ar\"],\n        afg: [\"afg\", \"sgn\"],\n        ajp: [\"ajp\", \"ar\"],\n        apc: [\"apc\", \"ar\"],\n        apd: [\"apd\", \"ar\"],\n        arb: [\"arb\", \"ar\"],\n        arq: [\"arq\", \"ar\"],\n        ars: [\"ars\", \"ar\"],\n        ary: [\"ary\", \"ar\"],\n        arz: [\"arz\", \"ar\"],\n        ase: [\"ase\", \"sgn\"],\n        asf: [\"asf\", \"sgn\"],\n        asp: [\"asp\", \"sgn\"],\n        asq: [\"asq\", \"sgn\"],\n        asw: [\"asw\", \"sgn\"],\n        auz: [\"auz\", \"ar\"],\n        avl: [\"avl\", \"ar\"],\n        ayh: [\"ayh\", \"ar\"],\n        ayl: [\"ayl\", \"ar\"],\n        ayn: [\"ayn\", \"ar\"],\n        ayp: [\"ayp\", \"ar\"],\n        bbz: [\"bbz\", \"ar\"],\n        bfi: [\"bfi\", \"sgn\"],\n        bfk: [\"bfk\", \"sgn\"],\n        bjn: [\"bjn\", \"ms\"],\n        bog: [\"bog\", \"sgn\"],\n        bqn: [\"bqn\", \"sgn\"],\n        bqy: [\"bqy\", \"sgn\"],\n        btj: [\"btj\", \"ms\"],\n        bve: [\"bve\", \"ms\"],\n        bvl: [\"bvl\", \"sgn\"],\n        bvu: [\"bvu\", \"ms\"],\n        bzs: [\"bzs\", \"sgn\"],\n        cdo: [\"cdo\", \"zh\"],\n        cds: [\"cds\", \"sgn\"],\n        cjy: [\"cjy\", \"zh\"],\n        cmn: [\"cmn\", \"zh\"],\n        coa: [\"coa\", \"ms\"],\n        cpx: [\"cpx\", \"zh\"],\n        csc: [\"csc\", \"sgn\"],\n        csd: [\"csd\", \"sgn\"],\n        cse: [\"cse\", \"sgn\"],\n        csf: [\"csf\", \"sgn\"],\n        csg: [\"csg\", \"sgn\"],\n        csl: [\"csl\", \"sgn\"],\n        csn: [\"csn\", \"sgn\"],\n        csq: [\"csq\", \"sgn\"],\n        csr: [\"csr\", \"sgn\"],\n        czh: [\"czh\", \"zh\"],\n        czo: [\"czo\", \"zh\"],\n        doq: [\"doq\", \"sgn\"],\n        dse: [\"dse\", \"sgn\"],\n        dsl: [\"dsl\", \"sgn\"],\n        dup: [\"dup\", \"ms\"],\n        ecs: [\"ecs\", \"sgn\"],\n        esl: [\"esl\", \"sgn\"],\n        esn: [\"esn\", \"sgn\"],\n        eso: [\"eso\", \"sgn\"],\n        eth: [\"eth\", \"sgn\"],\n        fcs: [\"fcs\", \"sgn\"],\n        fse: [\"fse\", \"sgn\"],\n        fsl: [\"fsl\", \"sgn\"],\n        fss: [\"fss\", \"sgn\"],\n        gan: [\"gan\", \"zh\"],\n        gds: [\"gds\", \"sgn\"],\n        gom: [\"gom\", \"kok\"],\n        gse: [\"gse\", \"sgn\"],\n        gsg: [\"gsg\", \"sgn\"],\n        gsm: [\"gsm\", \"sgn\"],\n        gss: [\"gss\", \"sgn\"],\n        gus: [\"gus\", \"sgn\"],\n        hab: [\"hab\", \"sgn\"],\n        haf: [\"haf\", \"sgn\"],\n        hak: [\"hak\", \"zh\"],\n        hds: [\"hds\", \"sgn\"],\n        hji: [\"hji\", \"ms\"],\n        hks: [\"hks\", \"sgn\"],\n        hos: [\"hos\", \"sgn\"],\n        hps: [\"hps\", \"sgn\"],\n        hsh: [\"hsh\", \"sgn\"],\n        hsl: [\"hsl\", \"sgn\"],\n        hsn: [\"hsn\", \"zh\"],\n        icl: [\"icl\", \"sgn\"],\n        ils: [\"ils\", \"sgn\"],\n        inl: [\"inl\", \"sgn\"],\n        ins: [\"ins\", \"sgn\"],\n        ise: [\"ise\", \"sgn\"],\n        isg: [\"isg\", \"sgn\"],\n        isr: [\"isr\", \"sgn\"],\n        jak: [\"jak\", \"ms\"],\n        jax: [\"jax\", \"ms\"],\n        jcs: [\"jcs\", \"sgn\"],\n        jhs: [\"jhs\", \"sgn\"],\n        jls: [\"jls\", \"sgn\"],\n        jos: [\"jos\", \"sgn\"],\n        jsl: [\"jsl\", \"sgn\"],\n        jus: [\"jus\", \"sgn\"],\n        kgi: [\"kgi\", \"sgn\"],\n        knn: [\"knn\", \"kok\"],\n        kvb: [\"kvb\", \"ms\"],\n        kvk: [\"kvk\", \"sgn\"],\n        kvr: [\"kvr\", \"ms\"],\n        kxd: [\"kxd\", \"ms\"],\n        lbs: [\"lbs\", \"sgn\"],\n        lce: [\"lce\", \"ms\"],\n        lcf: [\"lcf\", \"ms\"],\n        liw: [\"liw\", \"ms\"],\n        lls: [\"lls\", \"sgn\"],\n        lsg: [\"lsg\", \"sgn\"],\n        lsl: [\"lsl\", \"sgn\"],\n        lso: [\"lso\", \"sgn\"],\n        lsp: [\"lsp\", \"sgn\"],\n        lst: [\"lst\", \"sgn\"],\n        lsy: [\"lsy\", \"sgn\"],\n        ltg: [\"ltg\", \"lv\"],\n        lvs: [\"lvs\", \"lv\"],\n        lzh: [\"lzh\", \"zh\"],\n        max: [\"max\", \"ms\"],\n        mdl: [\"mdl\", \"sgn\"],\n        meo: [\"meo\", \"ms\"],\n        mfa: [\"mfa\", \"ms\"],\n        mfb: [\"mfb\", \"ms\"],\n        mfs: [\"mfs\", \"sgn\"],\n        min: [\"min\", \"ms\"],\n        mnp: [\"mnp\", \"zh\"],\n        mqg: [\"mqg\", \"ms\"],\n        mre: [\"mre\", \"sgn\"],\n        msd: [\"msd\", \"sgn\"],\n        msi: [\"msi\", \"ms\"],\n        msr: [\"msr\", \"sgn\"],\n        mui: [\"mui\", \"ms\"],\n        mzc: [\"mzc\", \"sgn\"],\n        mzg: [\"mzg\", \"sgn\"],\n        mzy: [\"mzy\", \"sgn\"],\n        nan: [\"nan\", \"zh\"],\n        nbs: [\"nbs\", \"sgn\"],\n        ncs: [\"ncs\", \"sgn\"],\n        nsi: [\"nsi\", \"sgn\"],\n        nsl: [\"nsl\", \"sgn\"],\n        nsp: [\"nsp\", \"sgn\"],\n        nsr: [\"nsr\", \"sgn\"],\n        nzs: [\"nzs\", \"sgn\"],\n        okl: [\"okl\", \"sgn\"],\n        orn: [\"orn\", \"ms\"],\n        ors: [\"ors\", \"ms\"],\n        pel: [\"pel\", \"ms\"],\n        pga: [\"pga\", \"ar\"],\n        pks: [\"pks\", \"sgn\"],\n        prl: [\"prl\", \"sgn\"],\n        prz: [\"prz\", \"sgn\"],\n        psc: [\"psc\", \"sgn\"],\n        psd: [\"psd\", \"sgn\"],\n        pse: [\"pse\", \"ms\"],\n        psg: [\"psg\", \"sgn\"],\n        psl: [\"psl\", \"sgn\"],\n        pso: [\"pso\", \"sgn\"],\n        psp: [\"psp\", \"sgn\"],\n        psr: [\"psr\", \"sgn\"],\n        pys: [\"pys\", \"sgn\"],\n        rms: [\"rms\", \"sgn\"],\n        rsi: [\"rsi\", \"sgn\"],\n        rsl: [\"rsl\", \"sgn\"],\n        sdl: [\"sdl\", \"sgn\"],\n        sfb: [\"sfb\", \"sgn\"],\n        sfs: [\"sfs\", \"sgn\"],\n        sgg: [\"sgg\", \"sgn\"],\n        sgx: [\"sgx\", \"sgn\"],\n        shu: [\"shu\", \"ar\"],\n        slf: [\"slf\", \"sgn\"],\n        sls: [\"sls\", \"sgn\"],\n        sqk: [\"sqk\", \"sgn\"],\n        sqs: [\"sqs\", \"sgn\"],\n        ssh: [\"ssh\", \"ar\"],\n        ssp: [\"ssp\", \"sgn\"],\n        ssr: [\"ssr\", \"sgn\"],\n        svk: [\"svk\", \"sgn\"],\n        swc: [\"swc\", \"sw\"],\n        swh: [\"swh\", \"sw\"],\n        swl: [\"swl\", \"sgn\"],\n        syy: [\"syy\", \"sgn\"],\n        tmw: [\"tmw\", \"ms\"],\n        tse: [\"tse\", \"sgn\"],\n        tsm: [\"tsm\", \"sgn\"],\n        tsq: [\"tsq\", \"sgn\"],\n        tss: [\"tss\", \"sgn\"],\n        tsy: [\"tsy\", \"sgn\"],\n        tza: [\"tza\", \"sgn\"],\n        ugn: [\"ugn\", \"sgn\"],\n        ugy: [\"ugy\", \"sgn\"],\n        ukl: [\"ukl\", \"sgn\"],\n        uks: [\"uks\", \"sgn\"],\n        urk: [\"urk\", \"ms\"],\n        uzn: [\"uzn\", \"uz\"],\n        uzs: [\"uzs\", \"uz\"],\n        vgt: [\"vgt\", \"sgn\"],\n        vkk: [\"vkk\", \"ms\"],\n        vkt: [\"vkt\", \"ms\"],\n        vsi: [\"vsi\", \"sgn\"],\n        vsl: [\"vsl\", \"sgn\"],\n        vsv: [\"vsv\", \"sgn\"],\n        wuu: [\"wuu\", \"zh\"],\n        xki: [\"xki\", \"sgn\"],\n        xml: [\"xml\", \"sgn\"],\n        xmm: [\"xmm\", \"ms\"],\n        xms: [\"xms\", \"sgn\"],\n        yds: [\"yds\", \"sgn\"],\n        ysl: [\"ysl\", \"sgn\"],\n        yue: [\"yue\", \"zh\"],\n        zib: [\"zib\", \"sgn\"],\n        zlm: [\"zlm\", \"ms\"],\n        zmi: [\"zmi\", \"ms\"],\n        zsl: [\"zsl\", \"sgn\"],\n        zsm: [\"zsm\", \"ms\"]\n    }\n};\n\n/**\n * Convert only a-z to uppercase as per section 6.1 of the spec\n */\nfunction toLatinUpperCase(str) {\n    var i = str.length;\n\n    while (i--) {\n        var ch = str.charAt(i);\n\n        if (ch >= \"a\" && ch <= \"z\") str = str.slice(0, i) + ch.toUpperCase() + str.slice(i + 1);\n    }\n\n    return str;\n}\n\n/**\n * The IsStructurallyValidLanguageTag abstract operation verifies that the locale\n * argument (which must be a String value)\n *\n * - represents a well-formed BCP 47 language tag as specified in RFC 5646 section\n *   2.1, or successor,\n * - does not include duplicate variant subtags, and\n * - does not include duplicate singleton subtags.\n *\n * The abstract operation returns true if locale can be generated from the ABNF\n * grammar in section 2.1 of the RFC, starting with Language-Tag, and does not\n * contain duplicate variant or singleton subtags (other than as a private use\n * subtag). It returns false otherwise. Terminal value characters in the grammar are\n * interpreted as the Unicode equivalents of the ASCII octet values given.\n */\nfunction /* 6.2.2 */IsStructurallyValidLanguageTag(locale) {\n    // represents a well-formed BCP 47 language tag as specified in RFC 5646\n    if (!expBCP47Syntax.test(locale)) return false;\n\n    // does not include duplicate variant subtags, and\n    if (expVariantDupes.test(locale)) return false;\n\n    // does not include duplicate singleton subtags.\n    if (expSingletonDupes.test(locale)) return false;\n\n    return true;\n}\n\n/**\n * The CanonicalizeLanguageTag abstract operation returns the canonical and case-\n * regularized form of the locale argument (which must be a String value that is\n * a structurally valid BCP 47 language tag as verified by the\n * IsStructurallyValidLanguageTag abstract operation). It takes the steps\n * specified in RFC 5646 section 4.5, or successor, to bring the language tag\n * into canonical form, and to regularize the case of the subtags, but does not\n * take the steps to bring a language tag into “extlang form” and to reorder\n * variant subtags.\n\n * The specifications for extensions to BCP 47 language tags, such as RFC 6067,\n * may include canonicalization rules for the extension subtag sequences they\n * define that go beyond the canonicalization rules of RFC 5646 section 4.5.\n * Implementations are allowed, but not required, to apply these additional rules.\n */\nfunction /* 6.2.3 */CanonicalizeLanguageTag(locale) {\n    var match = void 0,\n        parts = void 0;\n\n    // A language tag is in 'canonical form' when the tag is well-formed\n    // according to the rules in Sections 2.1 and 2.2\n\n    // Section 2.1 says all subtags use lowercase...\n    locale = locale.toLowerCase();\n\n    // ...with 2 exceptions: 'two-letter and four-letter subtags that neither\n    // appear at the start of the tag nor occur after singletons.  Such two-letter\n    // subtags are all uppercase (as in the tags \"en-CA-x-ca\" or \"sgn-BE-FR\") and\n    // four-letter subtags are titlecase (as in the tag \"az-Latn-x-latn\").\n    parts = locale.split('-');\n    for (var i = 1, max = parts.length; i < max; i++) {\n        // Two-letter subtags are all uppercase\n        if (parts[i].length === 2) parts[i] = parts[i].toUpperCase();\n\n        // Four-letter subtags are titlecase\n        else if (parts[i].length === 4) parts[i] = parts[i].charAt(0).toUpperCase() + parts[i].slice(1);\n\n            // Is it a singleton?\n            else if (parts[i].length === 1 && parts[i] !== 'x') break;\n    }\n    locale = arrJoin.call(parts, '-');\n\n    // The steps laid out in RFC 5646 section 4.5 are as follows:\n\n    // 1.  Extension sequences are ordered into case-insensitive ASCII order\n    //     by singleton subtag.\n    if ((match = locale.match(expExtSequences)) && match.length > 1) {\n        // The built-in sort() sorts by ASCII order, so use that\n        match.sort();\n\n        // Replace all extensions with the joined, sorted array\n        locale = locale.replace(RegExp('(?:' + expExtSequences.source + ')+', 'i'), arrJoin.call(match, ''));\n    }\n\n    // 2.  Redundant or grandfathered tags are replaced by their 'Preferred-\n    //     Value', if there is one.\n    if (hop.call(redundantTags.tags, locale)) locale = redundantTags.tags[locale];\n\n    // 3.  Subtags are replaced by their 'Preferred-Value', if there is one.\n    //     For extlangs, the original primary language subtag is also\n    //     replaced if there is a primary language subtag in the 'Preferred-\n    //     Value'.\n    parts = locale.split('-');\n\n    for (var _i = 1, _max = parts.length; _i < _max; _i++) {\n        if (hop.call(redundantTags.subtags, parts[_i])) parts[_i] = redundantTags.subtags[parts[_i]];else if (hop.call(redundantTags.extLang, parts[_i])) {\n            parts[_i] = redundantTags.extLang[parts[_i]][0];\n\n            // For extlang tags, the prefix needs to be removed if it is redundant\n            if (_i === 1 && redundantTags.extLang[parts[1]][1] === parts[0]) {\n                parts = arrSlice.call(parts, _i++);\n                _max -= 1;\n            }\n        }\n    }\n\n    return arrJoin.call(parts, '-');\n}\n\n/**\n * The DefaultLocale abstract operation returns a String value representing the\n * structurally valid (6.2.2) and canonicalized (6.2.3) BCP 47 language tag for the\n * host environment’s current locale.\n */\nfunction /* 6.2.4 */DefaultLocale() {\n    return defaultLocale;\n}\n\n// Sect 6.3 Currency Codes\n// =======================\n\nvar expCurrencyCode = /^[A-Z]{3}$/;\n\n/**\n * The IsWellFormedCurrencyCode abstract operation verifies that the currency argument\n * (after conversion to a String value) represents a well-formed 3-letter ISO currency\n * code. The following steps are taken:\n */\nfunction /* 6.3.1 */IsWellFormedCurrencyCode(currency) {\n    // 1. Let `c` be ToString(currency)\n    var c = String(currency);\n\n    // 2. Let `normalized` be the result of mapping c to upper case as described\n    //    in 6.1.\n    var normalized = toLatinUpperCase(c);\n\n    // 3. If the string length of normalized is not 3, return false.\n    // 4. If normalized contains any character that is not in the range \"A\" to \"Z\"\n    //    (U+0041 to U+005A), return false.\n    if (expCurrencyCode.test(normalized) === false) return false;\n\n    // 5. Return true\n    return true;\n}\n\nvar expUnicodeExSeq = /-u(?:-[0-9a-z]{2,8})+/gi; // See `extension` below\n\nfunction /* 9.2.1 */CanonicalizeLocaleList(locales) {\n    // The abstract operation CanonicalizeLocaleList takes the following steps:\n\n    // 1. If locales is undefined, then a. Return a new empty List\n    if (locales === undefined) return new List();\n\n    // 2. Let seen be a new empty List.\n    var seen = new List();\n\n    // 3. If locales is a String value, then\n    //    a. Let locales be a new array created as if by the expression new\n    //    Array(locales) where Array is the standard built-in constructor with\n    //    that name and locales is the value of locales.\n    locales = typeof locales === 'string' ? [locales] : locales;\n\n    // 4. Let O be ToObject(locales).\n    var O = toObject(locales);\n\n    // 5. Let lenValue be the result of calling the [[Get]] internal method of\n    //    O with the argument \"length\".\n    // 6. Let len be ToUint32(lenValue).\n    var len = toLength(O.length);\n\n    // 7. Let k be 0.\n    var k = 0;\n\n    // 8. Repeat, while k < len\n    while (k < len) {\n        // a. Let Pk be ToString(k).\n        var Pk = String(k);\n\n        // b. Let kPresent be the result of calling the [[HasProperty]] internal\n        //    method of O with argument Pk.\n        var kPresent = Pk in O;\n\n        // c. If kPresent is true, then\n        if (kPresent) {\n            // i. Let kValue be the result of calling the [[Get]] internal\n            //     method of O with argument Pk.\n            var kValue = O[Pk];\n\n            // ii. If the type of kValue is not String or Object, then throw a\n            //     TypeError exception.\n            if (kValue === null || typeof kValue !== 'string' && (typeof kValue === \"undefined\" ? \"undefined\" : babelHelpers$1[\"typeof\"](kValue)) !== 'object') throw new TypeError('String or Object type expected');\n\n            // iii. Let tag be ToString(kValue).\n            var tag = String(kValue);\n\n            // iv. If the result of calling the abstract operation\n            //     IsStructurallyValidLanguageTag (defined in 6.2.2), passing tag as\n            //     the argument, is false, then throw a RangeError exception.\n            if (!IsStructurallyValidLanguageTag(tag)) throw new RangeError(\"'\" + tag + \"' is not a structurally valid language tag\");\n\n            // v. Let tag be the result of calling the abstract operation\n            //    CanonicalizeLanguageTag (defined in 6.2.3), passing tag as the\n            //    argument.\n            tag = CanonicalizeLanguageTag(tag);\n\n            // vi. If tag is not an element of seen, then append tag as the last\n            //     element of seen.\n            if (arrIndexOf.call(seen, tag) === -1) arrPush.call(seen, tag);\n        }\n\n        // d. Increase k by 1.\n        k++;\n    }\n\n    // 9. Return seen.\n    return seen;\n}\n\n/**\n * The BestAvailableLocale abstract operation compares the provided argument\n * locale, which must be a String value with a structurally valid and\n * canonicalized BCP 47 language tag, against the locales in availableLocales and\n * returns either the longest non-empty prefix of locale that is an element of\n * availableLocales, or undefined if there is no such element. It uses the\n * fallback mechanism of RFC 4647, section 3.4. The following steps are taken:\n */\nfunction /* 9.2.2 */BestAvailableLocale(availableLocales, locale) {\n    // 1. Let candidate be locale\n    var candidate = locale;\n\n    // 2. Repeat\n    while (candidate) {\n        // a. If availableLocales contains an element equal to candidate, then return\n        // candidate.\n        if (arrIndexOf.call(availableLocales, candidate) > -1) return candidate;\n\n        // b. Let pos be the character index of the last occurrence of \"-\"\n        // (U+002D) within candidate. If that character does not occur, return\n        // undefined.\n        var pos = candidate.lastIndexOf('-');\n\n        if (pos < 0) return;\n\n        // c. If pos ≥ 2 and the character \"-\" occurs at index pos-2 of candidate,\n        //    then decrease pos by 2.\n        if (pos >= 2 && candidate.charAt(pos - 2) === '-') pos -= 2;\n\n        // d. Let candidate be the substring of candidate from position 0, inclusive,\n        //    to position pos, exclusive.\n        candidate = candidate.substring(0, pos);\n    }\n}\n\n/**\n * The LookupMatcher abstract operation compares requestedLocales, which must be\n * a List as returned by CanonicalizeLocaleList, against the locales in\n * availableLocales and determines the best available language to meet the\n * request. The following steps are taken:\n */\nfunction /* 9.2.3 */LookupMatcher(availableLocales, requestedLocales) {\n    // 1. Let i be 0.\n    var i = 0;\n\n    // 2. Let len be the number of elements in requestedLocales.\n    var len = requestedLocales.length;\n\n    // 3. Let availableLocale be undefined.\n    var availableLocale = void 0;\n\n    var locale = void 0,\n        noExtensionsLocale = void 0;\n\n    // 4. Repeat while i < len and availableLocale is undefined:\n    while (i < len && !availableLocale) {\n        // a. Let locale be the element of requestedLocales at 0-origined list\n        //    position i.\n        locale = requestedLocales[i];\n\n        // b. Let noExtensionsLocale be the String value that is locale with all\n        //    Unicode locale extension sequences removed.\n        noExtensionsLocale = String(locale).replace(expUnicodeExSeq, '');\n\n        // c. Let availableLocale be the result of calling the\n        //    BestAvailableLocale abstract operation (defined in 9.2.2) with\n        //    arguments availableLocales and noExtensionsLocale.\n        availableLocale = BestAvailableLocale(availableLocales, noExtensionsLocale);\n\n        // d. Increase i by 1.\n        i++;\n    }\n\n    // 5. Let result be a new Record.\n    var result = new Record();\n\n    // 6. If availableLocale is not undefined, then\n    if (availableLocale !== undefined) {\n        // a. Set result.[[locale]] to availableLocale.\n        result['[[locale]]'] = availableLocale;\n\n        // b. If locale and noExtensionsLocale are not the same String value, then\n        if (String(locale) !== String(noExtensionsLocale)) {\n            // i. Let extension be the String value consisting of the first\n            //    substring of locale that is a Unicode locale extension sequence.\n            var extension = locale.match(expUnicodeExSeq)[0];\n\n            // ii. Let extensionIndex be the character position of the initial\n            //     \"-\" of the first Unicode locale extension sequence within locale.\n            var extensionIndex = locale.indexOf('-u-');\n\n            // iii. Set result.[[extension]] to extension.\n            result['[[extension]]'] = extension;\n\n            // iv. Set result.[[extensionIndex]] to extensionIndex.\n            result['[[extensionIndex]]'] = extensionIndex;\n        }\n    }\n    // 7. Else\n    else\n        // a. Set result.[[locale]] to the value returned by the DefaultLocale abstract\n        //    operation (defined in 6.2.4).\n        result['[[locale]]'] = DefaultLocale();\n\n    // 8. Return result\n    return result;\n}\n\n/**\n * The BestFitMatcher abstract operation compares requestedLocales, which must be\n * a List as returned by CanonicalizeLocaleList, against the locales in\n * availableLocales and determines the best available language to meet the\n * request. The algorithm is implementation dependent, but should produce results\n * that a typical user of the requested locales would perceive as at least as\n * good as those produced by the LookupMatcher abstract operation. Options\n * specified through Unicode locale extension sequences must be ignored by the\n * algorithm. Information about such subsequences is returned separately.\n * The abstract operation returns a record with a [[locale]] field, whose value\n * is the language tag of the selected locale, which must be an element of\n * availableLocales. If the language tag of the request locale that led to the\n * selected locale contained a Unicode locale extension sequence, then the\n * returned record also contains an [[extension]] field whose value is the first\n * Unicode locale extension sequence, and an [[extensionIndex]] field whose value\n * is the index of the first Unicode locale extension sequence within the request\n * locale language tag.\n */\nfunction /* 9.2.4 */BestFitMatcher(availableLocales, requestedLocales) {\n    return LookupMatcher(availableLocales, requestedLocales);\n}\n\n/**\n * The ResolveLocale abstract operation compares a BCP 47 language priority list\n * requestedLocales against the locales in availableLocales and determines the\n * best available language to meet the request. availableLocales and\n * requestedLocales must be provided as List values, options as a Record.\n */\nfunction /* 9.2.5 */ResolveLocale(availableLocales, requestedLocales, options, relevantExtensionKeys, localeData) {\n    if (availableLocales.length === 0) {\n        throw new ReferenceError('No locale data has been provided for this object yet.');\n    }\n\n    // The following steps are taken:\n    // 1. Let matcher be the value of options.[[localeMatcher]].\n    var matcher = options['[[localeMatcher]]'];\n\n    var r = void 0;\n\n    // 2. If matcher is \"lookup\", then\n    if (matcher === 'lookup')\n        // a. Let r be the result of calling the LookupMatcher abstract operation\n        //    (defined in 9.2.3) with arguments availableLocales and\n        //    requestedLocales.\n        r = LookupMatcher(availableLocales, requestedLocales);\n\n        // 3. Else\n    else\n        // a. Let r be the result of calling the BestFitMatcher abstract\n        //    operation (defined in 9.2.4) with arguments availableLocales and\n        //    requestedLocales.\n        r = BestFitMatcher(availableLocales, requestedLocales);\n\n    // 4. Let foundLocale be the value of r.[[locale]].\n    var foundLocale = r['[[locale]]'];\n\n    var extensionSubtags = void 0,\n        extensionSubtagsLength = void 0;\n\n    // 5. If r has an [[extension]] field, then\n    if (hop.call(r, '[[extension]]')) {\n        // a. Let extension be the value of r.[[extension]].\n        var extension = r['[[extension]]'];\n        // b. Let split be the standard built-in function object defined in ES5,\n        //    15.5.4.14.\n        var split = String.prototype.split;\n        // c. Let extensionSubtags be the result of calling the [[Call]] internal\n        //    method of split with extension as the this value and an argument\n        //    list containing the single item \"-\".\n        extensionSubtags = split.call(extension, '-');\n        // d. Let extensionSubtagsLength be the result of calling the [[Get]]\n        //    internal method of extensionSubtags with argument \"length\".\n        extensionSubtagsLength = extensionSubtags.length;\n    }\n\n    // 6. Let result be a new Record.\n    var result = new Record();\n\n    // 7. Set result.[[dataLocale]] to foundLocale.\n    result['[[dataLocale]]'] = foundLocale;\n\n    // 8. Let supportedExtension be \"-u\".\n    var supportedExtension = '-u';\n    // 9. Let i be 0.\n    var i = 0;\n    // 10. Let len be the result of calling the [[Get]] internal method of\n    //     relevantExtensionKeys with argument \"length\".\n    var len = relevantExtensionKeys.length;\n\n    // 11 Repeat while i < len:\n    while (i < len) {\n        // a. Let key be the result of calling the [[Get]] internal method of\n        //    relevantExtensionKeys with argument ToString(i).\n        var key = relevantExtensionKeys[i];\n        // b. Let foundLocaleData be the result of calling the [[Get]] internal\n        //    method of localeData with the argument foundLocale.\n        var foundLocaleData = localeData[foundLocale];\n        // c. Let keyLocaleData be the result of calling the [[Get]] internal\n        //    method of foundLocaleData with the argument key.\n        var keyLocaleData = foundLocaleData[key];\n        // d. Let value be the result of calling the [[Get]] internal method of\n        //    keyLocaleData with argument \"0\".\n        var value = keyLocaleData['0'];\n        // e. Let supportedExtensionAddition be \"\".\n        var supportedExtensionAddition = '';\n        // f. Let indexOf be the standard built-in function object defined in\n        //    ES5, 15.4.4.14.\n        var indexOf = arrIndexOf;\n\n        // g. If extensionSubtags is not undefined, then\n        if (extensionSubtags !== undefined) {\n            // i. Let keyPos be the result of calling the [[Call]] internal\n            //    method of indexOf with extensionSubtags as the this value and\n            // an argument list containing the single item key.\n            var keyPos = indexOf.call(extensionSubtags, key);\n\n            // ii. If keyPos ≠ -1, then\n            if (keyPos !== -1) {\n                // 1. If keyPos + 1 < extensionSubtagsLength and the length of the\n                //    result of calling the [[Get]] internal method of\n                //    extensionSubtags with argument ToString(keyPos +1) is greater\n                //    than 2, then\n                if (keyPos + 1 < extensionSubtagsLength && extensionSubtags[keyPos + 1].length > 2) {\n                    // a. Let requestedValue be the result of calling the [[Get]]\n                    //    internal method of extensionSubtags with argument\n                    //    ToString(keyPos + 1).\n                    var requestedValue = extensionSubtags[keyPos + 1];\n                    // b. Let valuePos be the result of calling the [[Call]]\n                    //    internal method of indexOf with keyLocaleData as the\n                    //    this value and an argument list containing the single\n                    //    item requestedValue.\n                    var valuePos = indexOf.call(keyLocaleData, requestedValue);\n\n                    // c. If valuePos ≠ -1, then\n                    if (valuePos !== -1) {\n                        // i. Let value be requestedValue.\n                        value = requestedValue,\n                        // ii. Let supportedExtensionAddition be the\n                        //     concatenation of \"-\", key, \"-\", and value.\n                        supportedExtensionAddition = '-' + key + '-' + value;\n                    }\n                }\n                // 2. Else\n                else {\n                        // a. Let valuePos be the result of calling the [[Call]]\n                        // internal method of indexOf with keyLocaleData as the this\n                        // value and an argument list containing the single item\n                        // \"true\".\n                        var _valuePos = indexOf(keyLocaleData, 'true');\n\n                        // b. If valuePos ≠ -1, then\n                        if (_valuePos !== -1)\n                            // i. Let value be \"true\".\n                            value = 'true';\n                    }\n            }\n        }\n        // h. If options has a field [[<key>]], then\n        if (hop.call(options, '[[' + key + ']]')) {\n            // i. Let optionsValue be the value of options.[[<key>]].\n            var optionsValue = options['[[' + key + ']]'];\n\n            // ii. If the result of calling the [[Call]] internal method of indexOf\n            //     with keyLocaleData as the this value and an argument list\n            //     containing the single item optionsValue is not -1, then\n            if (indexOf.call(keyLocaleData, optionsValue) !== -1) {\n                // 1. If optionsValue is not equal to value, then\n                if (optionsValue !== value) {\n                    // a. Let value be optionsValue.\n                    value = optionsValue;\n                    // b. Let supportedExtensionAddition be \"\".\n                    supportedExtensionAddition = '';\n                }\n            }\n        }\n        // i. Set result.[[<key>]] to value.\n        result['[[' + key + ']]'] = value;\n\n        // j. Append supportedExtensionAddition to supportedExtension.\n        supportedExtension += supportedExtensionAddition;\n\n        // k. Increase i by 1.\n        i++;\n    }\n    // 12. If the length of supportedExtension is greater than 2, then\n    if (supportedExtension.length > 2) {\n        // a.\n        var privateIndex = foundLocale.indexOf(\"-x-\");\n        // b.\n        if (privateIndex === -1) {\n            // i.\n            foundLocale = foundLocale + supportedExtension;\n        }\n        // c.\n        else {\n                // i.\n                var preExtension = foundLocale.substring(0, privateIndex);\n                // ii.\n                var postExtension = foundLocale.substring(privateIndex);\n                // iii.\n                foundLocale = preExtension + supportedExtension + postExtension;\n            }\n        // d. asserting - skipping\n        // e.\n        foundLocale = CanonicalizeLanguageTag(foundLocale);\n    }\n    // 13. Set result.[[locale]] to foundLocale.\n    result['[[locale]]'] = foundLocale;\n\n    // 14. Return result.\n    return result;\n}\n\n/**\n * The LookupSupportedLocales abstract operation returns the subset of the\n * provided BCP 47 language priority list requestedLocales for which\n * availableLocales has a matching locale when using the BCP 47 Lookup algorithm.\n * Locales appear in the same order in the returned list as in requestedLocales.\n * The following steps are taken:\n */\nfunction /* 9.2.6 */LookupSupportedLocales(availableLocales, requestedLocales) {\n    // 1. Let len be the number of elements in requestedLocales.\n    var len = requestedLocales.length;\n    // 2. Let subset be a new empty List.\n    var subset = new List();\n    // 3. Let k be 0.\n    var k = 0;\n\n    // 4. Repeat while k < len\n    while (k < len) {\n        // a. Let locale be the element of requestedLocales at 0-origined list\n        //    position k.\n        var locale = requestedLocales[k];\n        // b. Let noExtensionsLocale be the String value that is locale with all\n        //    Unicode locale extension sequences removed.\n        var noExtensionsLocale = String(locale).replace(expUnicodeExSeq, '');\n        // c. Let availableLocale be the result of calling the\n        //    BestAvailableLocale abstract operation (defined in 9.2.2) with\n        //    arguments availableLocales and noExtensionsLocale.\n        var availableLocale = BestAvailableLocale(availableLocales, noExtensionsLocale);\n\n        // d. If availableLocale is not undefined, then append locale to the end of\n        //    subset.\n        if (availableLocale !== undefined) arrPush.call(subset, locale);\n\n        // e. Increment k by 1.\n        k++;\n    }\n\n    // 5. Let subsetArray be a new Array object whose elements are the same\n    //    values in the same order as the elements of subset.\n    var subsetArray = arrSlice.call(subset);\n\n    // 6. Return subsetArray.\n    return subsetArray;\n}\n\n/**\n * The BestFitSupportedLocales abstract operation returns the subset of the\n * provided BCP 47 language priority list requestedLocales for which\n * availableLocales has a matching locale when using the Best Fit Matcher\n * algorithm. Locales appear in the same order in the returned list as in\n * requestedLocales. The steps taken are implementation dependent.\n */\nfunction /*9.2.7 */BestFitSupportedLocales(availableLocales, requestedLocales) {\n    // ###TODO: implement this function as described by the specification###\n    return LookupSupportedLocales(availableLocales, requestedLocales);\n}\n\n/**\n * The SupportedLocales abstract operation returns the subset of the provided BCP\n * 47 language priority list requestedLocales for which availableLocales has a\n * matching locale. Two algorithms are available to match the locales: the Lookup\n * algorithm described in RFC 4647 section 3.4, and an implementation dependent\n * best-fit algorithm. Locales appear in the same order in the returned list as\n * in requestedLocales. The following steps are taken:\n */\nfunction /*9.2.8 */SupportedLocales(availableLocales, requestedLocales, options) {\n    var matcher = void 0,\n        subset = void 0;\n\n    // 1. If options is not undefined, then\n    if (options !== undefined) {\n        // a. Let options be ToObject(options).\n        options = new Record(toObject(options));\n        // b. Let matcher be the result of calling the [[Get]] internal method of\n        //    options with argument \"localeMatcher\".\n        matcher = options.localeMatcher;\n\n        // c. If matcher is not undefined, then\n        if (matcher !== undefined) {\n            // i. Let matcher be ToString(matcher).\n            matcher = String(matcher);\n\n            // ii. If matcher is not \"lookup\" or \"best fit\", then throw a RangeError\n            //     exception.\n            if (matcher !== 'lookup' && matcher !== 'best fit') throw new RangeError('matcher should be \"lookup\" or \"best fit\"');\n        }\n    }\n    // 2. If matcher is undefined or \"best fit\", then\n    if (matcher === undefined || matcher === 'best fit')\n        // a. Let subset be the result of calling the BestFitSupportedLocales\n        //    abstract operation (defined in 9.2.7) with arguments\n        //    availableLocales and requestedLocales.\n        subset = BestFitSupportedLocales(availableLocales, requestedLocales);\n        // 3. Else\n    else\n        // a. Let subset be the result of calling the LookupSupportedLocales\n        //    abstract operation (defined in 9.2.6) with arguments\n        //    availableLocales and requestedLocales.\n        subset = LookupSupportedLocales(availableLocales, requestedLocales);\n\n    // 4. For each named own property name P of subset,\n    for (var P in subset) {\n        if (!hop.call(subset, P)) continue;\n\n        // a. Let desc be the result of calling the [[GetOwnProperty]] internal\n        //    method of subset with P.\n        // b. Set desc.[[Writable]] to false.\n        // c. Set desc.[[Configurable]] to false.\n        // d. Call the [[DefineOwnProperty]] internal method of subset with P, desc,\n        //    and true as arguments.\n        defineProperty(subset, P, {\n            writable: false, configurable: false, value: subset[P]\n        });\n    }\n    // \"Freeze\" the array so no new elements can be added\n    defineProperty(subset, 'length', { writable: false });\n\n    // 5. Return subset\n    return subset;\n}\n\n/**\n * The GetOption abstract operation extracts the value of the property named\n * property from the provided options object, converts it to the required type,\n * checks whether it is one of a List of allowed values, and fills in a fallback\n * value if necessary.\n */\nfunction /*9.2.9 */GetOption(options, property, type, values, fallback) {\n    // 1. Let value be the result of calling the [[Get]] internal method of\n    //    options with argument property.\n    var value = options[property];\n\n    // 2. If value is not undefined, then\n    if (value !== undefined) {\n        // a. Assert: type is \"boolean\" or \"string\".\n        // b. If type is \"boolean\", then let value be ToBoolean(value).\n        // c. If type is \"string\", then let value be ToString(value).\n        value = type === 'boolean' ? Boolean(value) : type === 'string' ? String(value) : value;\n\n        // d. If values is not undefined, then\n        if (values !== undefined) {\n            // i. If values does not contain an element equal to value, then throw a\n            //    RangeError exception.\n            if (arrIndexOf.call(values, value) === -1) throw new RangeError(\"'\" + value + \"' is not an allowed value for `\" + property + '`');\n        }\n\n        // e. Return value.\n        return value;\n    }\n    // Else return fallback.\n    return fallback;\n}\n\n/**\n * The GetNumberOption abstract operation extracts a property value from the\n * provided options object, converts it to a Number value, checks whether it is\n * in the allowed range, and fills in a fallback value if necessary.\n */\nfunction /* 9.2.10 */GetNumberOption(options, property, minimum, maximum, fallback) {\n    // 1. Let value be the result of calling the [[Get]] internal method of\n    //    options with argument property.\n    var value = options[property];\n\n    // 2. If value is not undefined, then\n    if (value !== undefined) {\n        // a. Let value be ToNumber(value).\n        value = Number(value);\n\n        // b. If value is NaN or less than minimum or greater than maximum, throw a\n        //    RangeError exception.\n        if (isNaN(value) || value < minimum || value > maximum) throw new RangeError('Value is not a number or outside accepted range');\n\n        // c. Return floor(value).\n        return Math.floor(value);\n    }\n    // 3. Else return fallback.\n    return fallback;\n}\n\n// 8 The Intl Object\nvar Intl = {};\n\n// 8.2 Function Properties of the Intl Object\n\n// 8.2.1\n// @spec[tc39/ecma402/master/spec/intl.html]\n// @clause[sec-intl.getcanonicallocales]\nfunction getCanonicalLocales(locales) {\n    // 1. Let ll be ? CanonicalizeLocaleList(locales).\n    var ll = CanonicalizeLocaleList(locales);\n    // 2. Return CreateArrayFromList(ll).\n    {\n        var result = [];\n\n        var len = ll.length;\n        var k = 0;\n\n        while (k < len) {\n            result[k] = ll[k];\n            k++;\n        }\n        return result;\n    }\n}\n\nObject.defineProperty(Intl, 'getCanonicalLocales', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: getCanonicalLocales\n});\n\n// Currency minor units output from get-4217 grunt task, formatted\nvar currencyMinorUnits = {\n    BHD: 3, BYR: 0, XOF: 0, BIF: 0, XAF: 0, CLF: 4, CLP: 0, KMF: 0, DJF: 0,\n    XPF: 0, GNF: 0, ISK: 0, IQD: 3, JPY: 0, JOD: 3, KRW: 0, KWD: 3, LYD: 3,\n    OMR: 3, PYG: 0, RWF: 0, TND: 3, UGX: 0, UYI: 0, VUV: 0, VND: 0\n};\n\n// Define the NumberFormat constructor internally so it cannot be tainted\nfunction NumberFormatConstructor() {\n    var locales = arguments[0];\n    var options = arguments[1];\n\n    if (!this || this === Intl) {\n        return new Intl.NumberFormat(locales, options);\n    }\n\n    return InitializeNumberFormat(toObject(this), locales, options);\n}\n\ndefineProperty(Intl, 'NumberFormat', {\n    configurable: true,\n    writable: true,\n    value: NumberFormatConstructor\n});\n\n// Must explicitly set prototypes as unwritable\ndefineProperty(Intl.NumberFormat, 'prototype', {\n    writable: false\n});\n\n/**\n * The abstract operation InitializeNumberFormat accepts the arguments\n * numberFormat (which must be an object), locales, and options. It initializes\n * numberFormat as a NumberFormat object.\n */\nfunction /*11.1.1.1 */InitializeNumberFormat(numberFormat, locales, options) {\n    // This will be a internal properties object if we're not already initialized\n    var internal = getInternalProperties(numberFormat);\n\n    // Create an object whose props can be used to restore the values of RegExp props\n    var regexpRestore = createRegExpRestore();\n\n    // 1. If numberFormat has an [[initializedIntlObject]] internal property with\n    // value true, throw a TypeError exception.\n    if (internal['[[initializedIntlObject]]'] === true) throw new TypeError('`this` object has already been initialized as an Intl object');\n\n    // Need this to access the `internal` object\n    defineProperty(numberFormat, '__getInternalProperties', {\n        value: function value() {\n            // NOTE: Non-standard, for internal use only\n            if (arguments[0] === secret) return internal;\n        }\n    });\n\n    // 2. Set the [[initializedIntlObject]] internal property of numberFormat to true.\n    internal['[[initializedIntlObject]]'] = true;\n\n    // 3. Let requestedLocales be the result of calling the CanonicalizeLocaleList\n    //    abstract operation (defined in 9.2.1) with argument locales.\n    var requestedLocales = CanonicalizeLocaleList(locales);\n\n    // 4. If options is undefined, then\n    if (options === undefined)\n        // a. Let options be the result of creating a new object as if by the\n        // expression new Object() where Object is the standard built-in constructor\n        // with that name.\n        options = {};\n\n        // 5. Else\n    else\n        // a. Let options be ToObject(options).\n        options = toObject(options);\n\n    // 6. Let opt be a new Record.\n    var opt = new Record(),\n\n\n    // 7. Let matcher be the result of calling the GetOption abstract operation\n    //    (defined in 9.2.9) with the arguments options, \"localeMatcher\", \"string\",\n    //    a List containing the two String values \"lookup\" and \"best fit\", and\n    //    \"best fit\".\n    matcher = GetOption(options, 'localeMatcher', 'string', new List('lookup', 'best fit'), 'best fit');\n\n    // 8. Set opt.[[localeMatcher]] to matcher.\n    opt['[[localeMatcher]]'] = matcher;\n\n    // 9. Let NumberFormat be the standard built-in object that is the initial value\n    //    of Intl.NumberFormat.\n    // 10. Let localeData be the value of the [[localeData]] internal property of\n    //     NumberFormat.\n    var localeData = internals.NumberFormat['[[localeData]]'];\n\n    // 11. Let r be the result of calling the ResolveLocale abstract operation\n    //     (defined in 9.2.5) with the [[availableLocales]] internal property of\n    //     NumberFormat, requestedLocales, opt, the [[relevantExtensionKeys]]\n    //     internal property of NumberFormat, and localeData.\n    var r = ResolveLocale(internals.NumberFormat['[[availableLocales]]'], requestedLocales, opt, internals.NumberFormat['[[relevantExtensionKeys]]'], localeData);\n\n    // 12. Set the [[locale]] internal property of numberFormat to the value of\n    //     r.[[locale]].\n    internal['[[locale]]'] = r['[[locale]]'];\n\n    // 13. Set the [[numberingSystem]] internal property of numberFormat to the value\n    //     of r.[[nu]].\n    internal['[[numberingSystem]]'] = r['[[nu]]'];\n\n    // The specification doesn't tell us to do this, but it's helpful later on\n    internal['[[dataLocale]]'] = r['[[dataLocale]]'];\n\n    // 14. Let dataLocale be the value of r.[[dataLocale]].\n    var dataLocale = r['[[dataLocale]]'];\n\n    // 15. Let s be the result of calling the GetOption abstract operation with the\n    //     arguments options, \"style\", \"string\", a List containing the three String\n    //     values \"decimal\", \"percent\", and \"currency\", and \"decimal\".\n    var s = GetOption(options, 'style', 'string', new List('decimal', 'percent', 'currency'), 'decimal');\n\n    // 16. Set the [[style]] internal property of numberFormat to s.\n    internal['[[style]]'] = s;\n\n    // 17. Let c be the result of calling the GetOption abstract operation with the\n    //     arguments options, \"currency\", \"string\", undefined, and undefined.\n    var c = GetOption(options, 'currency', 'string');\n\n    // 18. If c is not undefined and the result of calling the\n    //     IsWellFormedCurrencyCode abstract operation (defined in 6.3.1) with\n    //     argument c is false, then throw a RangeError exception.\n    if (c !== undefined && !IsWellFormedCurrencyCode(c)) throw new RangeError(\"'\" + c + \"' is not a valid currency code\");\n\n    // 19. If s is \"currency\" and c is undefined, throw a TypeError exception.\n    if (s === 'currency' && c === undefined) throw new TypeError('Currency code is required when style is currency');\n\n    var cDigits = void 0;\n\n    // 20. If s is \"currency\", then\n    if (s === 'currency') {\n        // a. Let c be the result of converting c to upper case as specified in 6.1.\n        c = c.toUpperCase();\n\n        // b. Set the [[currency]] internal property of numberFormat to c.\n        internal['[[currency]]'] = c;\n\n        // c. Let cDigits be the result of calling the CurrencyDigits abstract\n        //    operation (defined below) with argument c.\n        cDigits = CurrencyDigits(c);\n    }\n\n    // 21. Let cd be the result of calling the GetOption abstract operation with the\n    //     arguments options, \"currencyDisplay\", \"string\", a List containing the\n    //     three String values \"code\", \"symbol\", and \"name\", and \"symbol\".\n    var cd = GetOption(options, 'currencyDisplay', 'string', new List('code', 'symbol', 'name'), 'symbol');\n\n    // 22. If s is \"currency\", then set the [[currencyDisplay]] internal property of\n    //     numberFormat to cd.\n    if (s === 'currency') internal['[[currencyDisplay]]'] = cd;\n\n    // 23. Let mnid be the result of calling the GetNumberOption abstract operation\n    //     (defined in 9.2.10) with arguments options, \"minimumIntegerDigits\", 1, 21,\n    //     and 1.\n    var mnid = GetNumberOption(options, 'minimumIntegerDigits', 1, 21, 1);\n\n    // 24. Set the [[minimumIntegerDigits]] internal property of numberFormat to mnid.\n    internal['[[minimumIntegerDigits]]'] = mnid;\n\n    // 25. If s is \"currency\", then let mnfdDefault be cDigits; else let mnfdDefault\n    //     be 0.\n    var mnfdDefault = s === 'currency' ? cDigits : 0;\n\n    // 26. Let mnfd be the result of calling the GetNumberOption abstract operation\n    //     with arguments options, \"minimumFractionDigits\", 0, 20, and mnfdDefault.\n    var mnfd = GetNumberOption(options, 'minimumFractionDigits', 0, 20, mnfdDefault);\n\n    // 27. Set the [[minimumFractionDigits]] internal property of numberFormat to mnfd.\n    internal['[[minimumFractionDigits]]'] = mnfd;\n\n    // 28. If s is \"currency\", then let mxfdDefault be max(mnfd, cDigits); else if s\n    //     is \"percent\", then let mxfdDefault be max(mnfd, 0); else let mxfdDefault\n    //     be max(mnfd, 3).\n    var mxfdDefault = s === 'currency' ? Math.max(mnfd, cDigits) : s === 'percent' ? Math.max(mnfd, 0) : Math.max(mnfd, 3);\n\n    // 29. Let mxfd be the result of calling the GetNumberOption abstract operation\n    //     with arguments options, \"maximumFractionDigits\", mnfd, 20, and mxfdDefault.\n    var mxfd = GetNumberOption(options, 'maximumFractionDigits', mnfd, 20, mxfdDefault);\n\n    // 30. Set the [[maximumFractionDigits]] internal property of numberFormat to mxfd.\n    internal['[[maximumFractionDigits]]'] = mxfd;\n\n    // 31. Let mnsd be the result of calling the [[Get]] internal method of options\n    //     with argument \"minimumSignificantDigits\".\n    var mnsd = options.minimumSignificantDigits;\n\n    // 32. Let mxsd be the result of calling the [[Get]] internal method of options\n    //     with argument \"maximumSignificantDigits\".\n    var mxsd = options.maximumSignificantDigits;\n\n    // 33. If mnsd is not undefined or mxsd is not undefined, then:\n    if (mnsd !== undefined || mxsd !== undefined) {\n        // a. Let mnsd be the result of calling the GetNumberOption abstract\n        //    operation with arguments options, \"minimumSignificantDigits\", 1, 21,\n        //    and 1.\n        mnsd = GetNumberOption(options, 'minimumSignificantDigits', 1, 21, 1);\n\n        // b. Let mxsd be the result of calling the GetNumberOption abstract\n        //     operation with arguments options, \"maximumSignificantDigits\", mnsd,\n        //     21, and 21.\n        mxsd = GetNumberOption(options, 'maximumSignificantDigits', mnsd, 21, 21);\n\n        // c. Set the [[minimumSignificantDigits]] internal property of numberFormat\n        //    to mnsd, and the [[maximumSignificantDigits]] internal property of\n        //    numberFormat to mxsd.\n        internal['[[minimumSignificantDigits]]'] = mnsd;\n        internal['[[maximumSignificantDigits]]'] = mxsd;\n    }\n    // 34. Let g be the result of calling the GetOption abstract operation with the\n    //     arguments options, \"useGrouping\", \"boolean\", undefined, and true.\n    var g = GetOption(options, 'useGrouping', 'boolean', undefined, true);\n\n    // 35. Set the [[useGrouping]] internal property of numberFormat to g.\n    internal['[[useGrouping]]'] = g;\n\n    // 36. Let dataLocaleData be the result of calling the [[Get]] internal method of\n    //     localeData with argument dataLocale.\n    var dataLocaleData = localeData[dataLocale];\n\n    // 37. Let patterns be the result of calling the [[Get]] internal method of\n    //     dataLocaleData with argument \"patterns\".\n    var patterns = dataLocaleData.patterns;\n\n    // 38. Assert: patterns is an object (see 11.2.3)\n\n    // 39. Let stylePatterns be the result of calling the [[Get]] internal method of\n    //     patterns with argument s.\n    var stylePatterns = patterns[s];\n\n    // 40. Set the [[positivePattern]] internal property of numberFormat to the\n    //     result of calling the [[Get]] internal method of stylePatterns with the\n    //     argument \"positivePattern\".\n    internal['[[positivePattern]]'] = stylePatterns.positivePattern;\n\n    // 41. Set the [[negativePattern]] internal property of numberFormat to the\n    //     result of calling the [[Get]] internal method of stylePatterns with the\n    //     argument \"negativePattern\".\n    internal['[[negativePattern]]'] = stylePatterns.negativePattern;\n\n    // 42. Set the [[boundFormat]] internal property of numberFormat to undefined.\n    internal['[[boundFormat]]'] = undefined;\n\n    // 43. Set the [[initializedNumberFormat]] internal property of numberFormat to\n    //     true.\n    internal['[[initializedNumberFormat]]'] = true;\n\n    // In ES3, we need to pre-bind the format() function\n    if (es3) numberFormat.format = GetFormatNumber.call(numberFormat);\n\n    // Restore the RegExp properties\n    regexpRestore();\n\n    // Return the newly initialised object\n    return numberFormat;\n}\n\nfunction CurrencyDigits(currency) {\n    // When the CurrencyDigits abstract operation is called with an argument currency\n    // (which must be an upper case String value), the following steps are taken:\n\n    // 1. If the ISO 4217 currency and funds code list contains currency as an\n    // alphabetic code, then return the minor unit value corresponding to the\n    // currency from the list; else return 2.\n    return currencyMinorUnits[currency] !== undefined ? currencyMinorUnits[currency] : 2;\n}\n\n/* 11.2.3 */internals.NumberFormat = {\n    '[[availableLocales]]': [],\n    '[[relevantExtensionKeys]]': ['nu'],\n    '[[localeData]]': {}\n};\n\n/**\n * When the supportedLocalesOf method of Intl.NumberFormat is called, the\n * following steps are taken:\n */\n/* 11.2.2 */\ndefineProperty(Intl.NumberFormat, 'supportedLocalesOf', {\n    configurable: true,\n    writable: true,\n    value: fnBind.call(function (locales) {\n        // Bound functions only have the `this` value altered if being used as a constructor,\n        // this lets us imitate a native function that has no constructor\n        if (!hop.call(this, '[[availableLocales]]')) throw new TypeError('supportedLocalesOf() is not a constructor');\n\n        // Create an object whose props can be used to restore the values of RegExp props\n        var regexpRestore = createRegExpRestore(),\n\n\n        // 1. If options is not provided, then let options be undefined.\n        options = arguments[1],\n\n\n        // 2. Let availableLocales be the value of the [[availableLocales]] internal\n        //    property of the standard built-in object that is the initial value of\n        //    Intl.NumberFormat.\n\n        availableLocales = this['[[availableLocales]]'],\n\n\n        // 3. Let requestedLocales be the result of calling the CanonicalizeLocaleList\n        //    abstract operation (defined in 9.2.1) with argument locales.\n        requestedLocales = CanonicalizeLocaleList(locales);\n\n        // Restore the RegExp properties\n        regexpRestore();\n\n        // 4. Return the result of calling the SupportedLocales abstract operation\n        //    (defined in 9.2.8) with arguments availableLocales, requestedLocales,\n        //    and options.\n        return SupportedLocales(availableLocales, requestedLocales, options);\n    }, internals.NumberFormat)\n});\n\n/**\n * This named accessor property returns a function that formats a number\n * according to the effective locale and the formatting options of this\n * NumberFormat object.\n */\n/* 11.3.2 */defineProperty(Intl.NumberFormat.prototype, 'format', {\n    configurable: true,\n    get: GetFormatNumber\n});\n\nfunction GetFormatNumber() {\n    var internal = this !== null && babelHelpers$1[\"typeof\"](this) === 'object' && getInternalProperties(this);\n\n    // Satisfy test 11.3_b\n    if (!internal || !internal['[[initializedNumberFormat]]']) throw new TypeError('`this` value for format() is not an initialized Intl.NumberFormat object.');\n\n    // The value of the [[Get]] attribute is a function that takes the following\n    // steps:\n\n    // 1. If the [[boundFormat]] internal property of this NumberFormat object\n    //    is undefined, then:\n    if (internal['[[boundFormat]]'] === undefined) {\n        // a. Let F be a Function object, with internal properties set as\n        //    specified for built-in functions in ES5, 15, or successor, and the\n        //    length property set to 1, that takes the argument value and\n        //    performs the following steps:\n        var F = function F(value) {\n            // i. If value is not provided, then let value be undefined.\n            // ii. Let x be ToNumber(value).\n            // iii. Return the result of calling the FormatNumber abstract\n            //      operation (defined below) with arguments this and x.\n            return FormatNumber(this, /* x = */Number(value));\n        };\n\n        // b. Let bind be the standard built-in function object defined in ES5,\n        //    15.3.4.5.\n        // c. Let bf be the result of calling the [[Call]] internal method of\n        //    bind with F as the this value and an argument list containing\n        //    the single item this.\n        var bf = fnBind.call(F, this);\n\n        // d. Set the [[boundFormat]] internal property of this NumberFormat\n        //    object to bf.\n        internal['[[boundFormat]]'] = bf;\n    }\n    // Return the value of the [[boundFormat]] internal property of this\n    // NumberFormat object.\n    return internal['[[boundFormat]]'];\n}\n\nfunction formatToParts() {\n    var value = arguments.length <= 0 || arguments[0] === undefined ? undefined : arguments[0];\n\n    var internal = this !== null && babelHelpers$1[\"typeof\"](this) === 'object' && getInternalProperties(this);\n    if (!internal || !internal['[[initializedNumberFormat]]']) throw new TypeError('`this` value for formatToParts() is not an initialized Intl.NumberFormat object.');\n\n    var x = Number(value);\n    return FormatNumberToParts(this, x);\n}\n\nObject.defineProperty(Intl.NumberFormat.prototype, 'formatToParts', {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value: formatToParts\n});\n\n/*\n * @spec[stasm/ecma402/number-format-to-parts/spec/numberformat.html]\n * @clause[sec-formatnumbertoparts]\n */\nfunction FormatNumberToParts(numberFormat, x) {\n    // 1. Let parts be ? PartitionNumberPattern(numberFormat, x).\n    var parts = PartitionNumberPattern(numberFormat, x);\n    // 2. Let result be ArrayCreate(0).\n    var result = [];\n    // 3. Let n be 0.\n    var n = 0;\n    // 4. For each part in parts, do:\n    for (var i = 0; parts.length > i; i++) {\n        var part = parts[i];\n        // a. Let O be ObjectCreate(%ObjectPrototype%).\n        var O = {};\n        // a. Perform ? CreateDataPropertyOrThrow(O, \"type\", part.[[type]]).\n        O.type = part['[[type]]'];\n        // a. Perform ? CreateDataPropertyOrThrow(O, \"value\", part.[[value]]).\n        O.value = part['[[value]]'];\n        // a. Perform ? CreateDataPropertyOrThrow(result, ? ToString(n), O).\n        result[n] = O;\n        // a. Increment n by 1.\n        n += 1;\n    }\n    // 5. Return result.\n    return result;\n}\n\n/*\n * @spec[stasm/ecma402/number-format-to-parts/spec/numberformat.html]\n * @clause[sec-partitionnumberpattern]\n */\nfunction PartitionNumberPattern(numberFormat, x) {\n\n    var internal = getInternalProperties(numberFormat),\n        locale = internal['[[dataLocale]]'],\n        nums = internal['[[numberingSystem]]'],\n        data = internals.NumberFormat['[[localeData]]'][locale],\n        ild = data.symbols[nums] || data.symbols.latn,\n        pattern = void 0;\n\n    // 1. If x is not NaN and x < 0, then:\n    if (!isNaN(x) && x < 0) {\n        // a. Let x be -x.\n        x = -x;\n        // a. Let pattern be the value of numberFormat.[[negativePattern]].\n        pattern = internal['[[negativePattern]]'];\n    }\n    // 2. Else,\n    else {\n            // a. Let pattern be the value of numberFormat.[[positivePattern]].\n            pattern = internal['[[positivePattern]]'];\n        }\n    // 3. Let result be a new empty List.\n    var result = new List();\n    // 4. Let beginIndex be Call(%StringProto_indexOf%, pattern, \"{\", 0).\n    var beginIndex = pattern.indexOf('{', 0);\n    // 5. Let endIndex be 0.\n    var endIndex = 0;\n    // 6. Let nextIndex be 0.\n    var nextIndex = 0;\n    // 7. Let length be the number of code units in pattern.\n    var length = pattern.length;\n    // 8. Repeat while beginIndex is an integer index into pattern:\n    while (beginIndex > -1 && beginIndex < length) {\n        // a. Set endIndex to Call(%StringProto_indexOf%, pattern, \"}\", beginIndex)\n        endIndex = pattern.indexOf('}', beginIndex);\n        // a. If endIndex = -1, throw new Error exception.\n        if (endIndex === -1) throw new Error();\n        // a. If beginIndex is greater than nextIndex, then:\n        if (beginIndex > nextIndex) {\n            // i. Let literal be a substring of pattern from position nextIndex, inclusive, to position beginIndex, exclusive.\n            var literal = pattern.substring(nextIndex, beginIndex);\n            // ii. Add new part record { [[type]]: \"literal\", [[value]]: literal } as a new element of the list result.\n            arrPush.call(result, { '[[type]]': 'literal', '[[value]]': literal });\n        }\n        // a. Let p be the substring of pattern from position beginIndex, exclusive, to position endIndex, exclusive.\n        var p = pattern.substring(beginIndex + 1, endIndex);\n        // a. If p is equal \"number\", then:\n        if (p === \"number\") {\n            // i. If x is NaN,\n            if (isNaN(x)) {\n                // 1. Let n be an ILD String value indicating the NaN value.\n                var n = ild.nan;\n                // 2. Add new part record { [[type]]: \"nan\", [[value]]: n } as a new element of the list result.\n                arrPush.call(result, { '[[type]]': 'nan', '[[value]]': n });\n            }\n            // ii. Else if isFinite(x) is false,\n            else if (!isFinite(x)) {\n                    // 1. Let n be an ILD String value indicating infinity.\n                    var _n = ild.infinity;\n                    // 2. Add new part record { [[type]]: \"infinity\", [[value]]: n } as a new element of the list result.\n                    arrPush.call(result, { '[[type]]': 'infinity', '[[value]]': _n });\n                }\n                // iii. Else,\n                else {\n                        // 1. If the value of numberFormat.[[style]] is \"percent\" and isFinite(x), let x be 100 × x.\n                        if (internal['[[style]]'] === 'percent' && isFinite(x)) x *= 100;\n\n                        var _n2 = void 0;\n                        // 2. If the numberFormat.[[minimumSignificantDigits]] and numberFormat.[[maximumSignificantDigits]] are present, then\n                        if (hop.call(internal, '[[minimumSignificantDigits]]') && hop.call(internal, '[[maximumSignificantDigits]]')) {\n                            // a. Let n be ToRawPrecision(x, numberFormat.[[minimumSignificantDigits]], numberFormat.[[maximumSignificantDigits]]).\n                            _n2 = ToRawPrecision(x, internal['[[minimumSignificantDigits]]'], internal['[[maximumSignificantDigits]]']);\n                        }\n                        // 3. Else,\n                        else {\n                                // a. Let n be ToRawFixed(x, numberFormat.[[minimumIntegerDigits]], numberFormat.[[minimumFractionDigits]], numberFormat.[[maximumFractionDigits]]).\n                                _n2 = ToRawFixed(x, internal['[[minimumIntegerDigits]]'], internal['[[minimumFractionDigits]]'], internal['[[maximumFractionDigits]]']);\n                            }\n                        // 4. If the value of the numberFormat.[[numberingSystem]] matches one of the values in the \"Numbering System\" column of Table 2 below, then\n                        if (numSys[nums]) {\n                            (function () {\n                                // a. Let digits be an array whose 10 String valued elements are the UTF-16 string representations of the 10 digits specified in the \"Digits\" column of the matching row in Table 2.\n                                var digits = numSys[nums];\n                                // a. Replace each digit in n with the value of digits[digit].\n                                _n2 = String(_n2).replace(/\\d/g, function (digit) {\n                                    return digits[digit];\n                                });\n                            })();\n                        }\n                        // 5. Else use an implementation dependent algorithm to map n to the appropriate representation of n in the given numbering system.\n                        else _n2 = String(_n2); // ###TODO###\n\n                        var integer = void 0;\n                        var fraction = void 0;\n                        // 6. Let decimalSepIndex be Call(%StringProto_indexOf%, n, \".\", 0).\n                        var decimalSepIndex = _n2.indexOf('.', 0);\n                        // 7. If decimalSepIndex > 0, then:\n                        if (decimalSepIndex > 0) {\n                            // a. Let integer be the substring of n from position 0, inclusive, to position decimalSepIndex, exclusive.\n                            integer = _n2.substring(0, decimalSepIndex);\n                            // a. Let fraction be the substring of n from position decimalSepIndex, exclusive, to the end of n.\n                            fraction = _n2.substring(decimalSepIndex + 1, decimalSepIndex.length);\n                        }\n                        // 8. Else:\n                        else {\n                                // a. Let integer be n.\n                                integer = _n2;\n                                // a. Let fraction be undefined.\n                                fraction = undefined;\n                            }\n                        // 9. If the value of the numberFormat.[[useGrouping]] is true,\n                        if (internal['[[useGrouping]]'] === true) {\n                            // a. Let groupSepSymbol be the ILND String representing the grouping separator.\n                            var groupSepSymbol = ild.group;\n                            // a. Let groups be a List whose elements are, in left to right order, the substrings defined by ILND set of locations within the integer.\n                            var groups = [];\n                            // ----> implementation:\n                            // Primary group represents the group closest to the decimal\n                            var pgSize = data.patterns.primaryGroupSize || 3;\n                            // Secondary group is every other group\n                            var sgSize = data.patterns.secondaryGroupSize || pgSize;\n                            // Group only if necessary\n                            if (integer.length > pgSize) {\n                                // Index of the primary grouping separator\n                                var end = integer.length - pgSize;\n                                // Starting index for our loop\n                                var idx = end % sgSize;\n                                var start = integer.slice(0, idx);\n                                if (start.length) arrPush.call(groups, start);\n                                // Loop to separate into secondary grouping digits\n                                while (idx < end) {\n                                    arrPush.call(groups, integer.slice(idx, idx + sgSize));\n                                    idx += sgSize;\n                                }\n                                // Add the primary grouping digits\n                                arrPush.call(groups, integer.slice(end));\n                            } else {\n                                arrPush.call(groups, integer);\n                            }\n                            // a. Assert: The number of elements in groups List is greater than 0.\n                            if (groups.length === 0) throw new Error();\n                            // a. Repeat, while groups List is not empty:\n                            while (groups.length) {\n                                // i. Remove the first element from groups and let integerGroup be the value of that element.\n                                var integerGroup = arrShift.call(groups);\n                                // ii. Add new part record { [[type]]: \"integer\", [[value]]: integerGroup } as a new element of the list result.\n                                arrPush.call(result, { '[[type]]': 'integer', '[[value]]': integerGroup });\n                                // iii. If groups List is not empty, then:\n                                if (groups.length) {\n                                    // 1. Add new part record { [[type]]: \"group\", [[value]]: groupSepSymbol } as a new element of the list result.\n                                    arrPush.call(result, { '[[type]]': 'group', '[[value]]': groupSepSymbol });\n                                }\n                            }\n                        }\n                        // 10. Else,\n                        else {\n                                // a. Add new part record { [[type]]: \"integer\", [[value]]: integer } as a new element of the list result.\n                                arrPush.call(result, { '[[type]]': 'integer', '[[value]]': integer });\n                            }\n                        // 11. If fraction is not undefined, then:\n                        if (fraction !== undefined) {\n                            // a. Let decimalSepSymbol be the ILND String representing the decimal separator.\n                            var decimalSepSymbol = ild.decimal;\n                            // a. Add new part record { [[type]]: \"decimal\", [[value]]: decimalSepSymbol } as a new element of the list result.\n                            arrPush.call(result, { '[[type]]': 'decimal', '[[value]]': decimalSepSymbol });\n                            // a. Add new part record { [[type]]: \"fraction\", [[value]]: fraction } as a new element of the list result.\n                            arrPush.call(result, { '[[type]]': 'fraction', '[[value]]': fraction });\n                        }\n                    }\n        }\n        // a. Else if p is equal \"plusSign\", then:\n        else if (p === \"plusSign\") {\n                // i. Let plusSignSymbol be the ILND String representing the plus sign.\n                var plusSignSymbol = ild.plusSign;\n                // ii. Add new part record { [[type]]: \"plusSign\", [[value]]: plusSignSymbol } as a new element of the list result.\n                arrPush.call(result, { '[[type]]': 'plusSign', '[[value]]': plusSignSymbol });\n            }\n            // a. Else if p is equal \"minusSign\", then:\n            else if (p === \"minusSign\") {\n                    // i. Let minusSignSymbol be the ILND String representing the minus sign.\n                    var minusSignSymbol = ild.minusSign;\n                    // ii. Add new part record { [[type]]: \"minusSign\", [[value]]: minusSignSymbol } as a new element of the list result.\n                    arrPush.call(result, { '[[type]]': 'minusSign', '[[value]]': minusSignSymbol });\n                }\n                // a. Else if p is equal \"percentSign\" and numberFormat.[[style]] is \"percent\", then:\n                else if (p === \"percentSign\" && internal['[[style]]'] === \"percent\") {\n                        // i. Let percentSignSymbol be the ILND String representing the percent sign.\n                        var percentSignSymbol = ild.percentSign;\n                        // ii. Add new part record { [[type]]: \"percentSign\", [[value]]: percentSignSymbol } as a new element of the list result.\n                        arrPush.call(result, { '[[type]]': 'literal', '[[value]]': percentSignSymbol });\n                    }\n                    // a. Else if p is equal \"currency\" and numberFormat.[[style]] is \"currency\", then:\n                    else if (p === \"currency\" && internal['[[style]]'] === \"currency\") {\n                            // i. Let currency be the value of numberFormat.[[currency]].\n                            var currency = internal['[[currency]]'];\n\n                            var cd = void 0;\n\n                            // ii. If numberFormat.[[currencyDisplay]] is \"code\", then\n                            if (internal['[[currencyDisplay]]'] === \"code\") {\n                                // 1. Let cd be currency.\n                                cd = currency;\n                            }\n                            // iii. Else if numberFormat.[[currencyDisplay]] is \"symbol\", then\n                            else if (internal['[[currencyDisplay]]'] === \"symbol\") {\n                                    // 1. Let cd be an ILD string representing currency in short form. If the implementation does not have such a representation of currency, use currency itself.\n                                    cd = data.currencies[currency] || currency;\n                                }\n                                // iv. Else if numberFormat.[[currencyDisplay]] is \"name\", then\n                                else if (internal['[[currencyDisplay]]'] === \"name\") {\n                                        // 1. Let cd be an ILD string representing currency in long form. If the implementation does not have such a representation of currency, then use currency itself.\n                                        cd = currency;\n                                    }\n                            // v. Add new part record { [[type]]: \"currency\", [[value]]: cd } as a new element of the list result.\n                            arrPush.call(result, { '[[type]]': 'currency', '[[value]]': cd });\n                        }\n                        // a. Else,\n                        else {\n                                // i. Let literal be the substring of pattern from position beginIndex, inclusive, to position endIndex, inclusive.\n                                var _literal = pattern.substring(beginIndex, endIndex);\n                                // ii. Add new part record { [[type]]: \"literal\", [[value]]: literal } as a new element of the list result.\n                                arrPush.call(result, { '[[type]]': 'literal', '[[value]]': _literal });\n                            }\n        // a. Set nextIndex to endIndex + 1.\n        nextIndex = endIndex + 1;\n        // a. Set beginIndex to Call(%StringProto_indexOf%, pattern, \"{\", nextIndex)\n        beginIndex = pattern.indexOf('{', nextIndex);\n    }\n    // 9. If nextIndex is less than length, then:\n    if (nextIndex < length) {\n        // a. Let literal be the substring of pattern from position nextIndex, inclusive, to position length, exclusive.\n        var _literal2 = pattern.substring(nextIndex, length);\n        // a. Add new part record { [[type]]: \"literal\", [[value]]: literal } as a new element of the list result.\n        arrPush.call(result, { '[[type]]': 'literal', '[[value]]': _literal2 });\n    }\n    // 10. Return result.\n    return result;\n}\n\n/*\n * @spec[stasm/ecma402/number-format-to-parts/spec/numberformat.html]\n * @clause[sec-formatnumber]\n */\nfunction FormatNumber(numberFormat, x) {\n    // 1. Let parts be ? PartitionNumberPattern(numberFormat, x).\n    var parts = PartitionNumberPattern(numberFormat, x);\n    // 2. Let result be an empty String.\n    var result = '';\n    // 3. For each part in parts, do:\n    for (var i = 0; parts.length > i; i++) {\n        var part = parts[i];\n        // a. Set result to a String value produced by concatenating result and part.[[value]].\n        result += part['[[value]]'];\n    }\n    // 4. Return result.\n    return result;\n}\n\n/**\n * When the ToRawPrecision abstract operation is called with arguments x (which\n * must be a finite non-negative number), minPrecision, and maxPrecision (both\n * must be integers between 1 and 21) the following steps are taken:\n */\nfunction ToRawPrecision(x, minPrecision, maxPrecision) {\n    // 1. Let p be maxPrecision.\n    var p = maxPrecision;\n\n    var m = void 0,\n        e = void 0;\n\n    // 2. If x = 0, then\n    if (x === 0) {\n        // a. Let m be the String consisting of p occurrences of the character \"0\".\n        m = arrJoin.call(Array(p + 1), '0');\n        // b. Let e be 0.\n        e = 0;\n    }\n    // 3. Else\n    else {\n            // a. Let e and n be integers such that 10ᵖ⁻¹ ≤ n < 10ᵖ and for which the\n            //    exact mathematical value of n × 10ᵉ⁻ᵖ⁺¹ – x is as close to zero as\n            //    possible. If there are two such sets of e and n, pick the e and n for\n            //    which n × 10ᵉ⁻ᵖ⁺¹ is larger.\n            e = log10Floor(Math.abs(x));\n\n            // Easier to get to m from here\n            var f = Math.round(Math.exp(Math.abs(e - p + 1) * Math.LN10));\n\n            // b. Let m be the String consisting of the digits of the decimal\n            //    representation of n (in order, with no leading zeroes)\n            m = String(Math.round(e - p + 1 < 0 ? x * f : x / f));\n        }\n\n    // 4. If e ≥ p, then\n    if (e >= p)\n        // a. Return the concatenation of m and e-p+1 occurrences of the character \"0\".\n        return m + arrJoin.call(Array(e - p + 1 + 1), '0');\n\n        // 5. If e = p-1, then\n    else if (e === p - 1)\n            // a. Return m.\n            return m;\n\n            // 6. If e ≥ 0, then\n        else if (e >= 0)\n                // a. Let m be the concatenation of the first e+1 characters of m, the character\n                //    \".\", and the remaining p–(e+1) characters of m.\n                m = m.slice(0, e + 1) + '.' + m.slice(e + 1);\n\n                // 7. If e < 0, then\n            else if (e < 0)\n                    // a. Let m be the concatenation of the String \"0.\", –(e+1) occurrences of the\n                    //    character \"0\", and the string m.\n                    m = '0.' + arrJoin.call(Array(-(e + 1) + 1), '0') + m;\n\n    // 8. If m contains the character \".\", and maxPrecision > minPrecision, then\n    if (m.indexOf(\".\") >= 0 && maxPrecision > minPrecision) {\n        // a. Let cut be maxPrecision – minPrecision.\n        var cut = maxPrecision - minPrecision;\n\n        // b. Repeat while cut > 0 and the last character of m is \"0\":\n        while (cut > 0 && m.charAt(m.length - 1) === '0') {\n            //  i. Remove the last character from m.\n            m = m.slice(0, -1);\n\n            //  ii. Decrease cut by 1.\n            cut--;\n        }\n\n        // c. If the last character of m is \".\", then\n        if (m.charAt(m.length - 1) === '.')\n            //    i. Remove the last character from m.\n            m = m.slice(0, -1);\n    }\n    // 9. Return m.\n    return m;\n}\n\n/**\n * @spec[tc39/ecma402/master/spec/numberformat.html]\n * @clause[sec-torawfixed]\n * When the ToRawFixed abstract operation is called with arguments x (which must\n * be a finite non-negative number), minInteger (which must be an integer between\n * 1 and 21), minFraction, and maxFraction (which must be integers between 0 and\n * 20) the following steps are taken:\n */\nfunction ToRawFixed(x, minInteger, minFraction, maxFraction) {\n    // 1. Let f be maxFraction.\n    var f = maxFraction;\n    // 2. Let n be an integer for which the exact mathematical value of n ÷ 10f – x is as close to zero as possible. If there are two such n, pick the larger n.\n    var n = Math.pow(10, f) * x; // diverging...\n    // 3. If n = 0, let m be the String \"0\". Otherwise, let m be the String consisting of the digits of the decimal representation of n (in order, with no leading zeroes).\n    var m = n === 0 ? \"0\" : n.toFixed(0); // divering...\n\n    {\n        // this diversion is needed to take into consideration big numbers, e.g.:\n        // 1.2344501e+37 -> 12344501000000000000000000000000000000\n        var idx = void 0;\n        var exp = (idx = m.indexOf('e')) > -1 ? m.slice(idx + 1) : 0;\n        if (exp) {\n            m = m.slice(0, idx).replace('.', '');\n            m += arrJoin.call(Array(exp - (m.length - 1) + 1), '0');\n        }\n    }\n\n    var int = void 0;\n    // 4. If f ≠ 0, then\n    if (f !== 0) {\n        // a. Let k be the number of characters in m.\n        var k = m.length;\n        // a. If k ≤ f, then\n        if (k <= f) {\n            // i. Let z be the String consisting of f+1–k occurrences of the character \"0\".\n            var z = arrJoin.call(Array(f + 1 - k + 1), '0');\n            // ii. Let m be the concatenation of Strings z and m.\n            m = z + m;\n            // iii. Let k be f+1.\n            k = f + 1;\n        }\n        // a. Let a be the first k–f characters of m, and let b be the remaining f characters of m.\n        var a = m.substring(0, k - f),\n            b = m.substring(k - f, m.length);\n        // a. Let m be the concatenation of the three Strings a, \".\", and b.\n        m = a + \".\" + b;\n        // a. Let int be the number of characters in a.\n        int = a.length;\n    }\n    // 5. Else, let int be the number of characters in m.\n    else int = m.length;\n    // 6. Let cut be maxFraction – minFraction.\n    var cut = maxFraction - minFraction;\n    // 7. Repeat while cut > 0 and the last character of m is \"0\":\n    while (cut > 0 && m.slice(-1) === \"0\") {\n        // a. Remove the last character from m.\n        m = m.slice(0, -1);\n        // a. Decrease cut by 1.\n        cut--;\n    }\n    // 8. If the last character of m is \".\", then\n    if (m.slice(-1) === \".\") {\n        // a. Remove the last character from m.\n        m = m.slice(0, -1);\n    }\n    // 9. If int < minInteger, then\n    if (int < minInteger) {\n        // a. Let z be the String consisting of minInteger–int occurrences of the character \"0\".\n        var _z = arrJoin.call(Array(minInteger - int + 1), '0');\n        // a. Let m be the concatenation of Strings z and m.\n        m = _z + m;\n    }\n    // 10. Return m.\n    return m;\n}\n\n// Sect 11.3.2 Table 2, Numbering systems\n// ======================================\nvar numSys = {\n    arab: [\"٠\", \"١\", \"٢\", \"٣\", \"٤\", \"٥\", \"٦\", \"٧\", \"٨\", \"٩\"],\n    arabext: [\"۰\", \"۱\", \"۲\", \"۳\", \"۴\", \"۵\", \"۶\", \"۷\", \"۸\", \"۹\"],\n    bali: [\"᭐\", \"᭑\", \"᭒\", \"᭓\", \"᭔\", \"᭕\", \"᭖\", \"᭗\", \"᭘\", \"᭙\"],\n    beng: [\"০\", \"১\", \"২\", \"৩\", \"৪\", \"৫\", \"৬\", \"৭\", \"৮\", \"৯\"],\n    deva: [\"०\", \"१\", \"२\", \"३\", \"४\", \"५\", \"६\", \"७\", \"८\", \"९\"],\n    fullwide: [\"０\", \"１\", \"２\", \"３\", \"４\", \"５\", \"６\", \"７\", \"８\", \"９\"],\n    gujr: [\"૦\", \"૧\", \"૨\", \"૩\", \"૪\", \"૫\", \"૬\", \"૭\", \"૮\", \"૯\"],\n    guru: [\"੦\", \"੧\", \"੨\", \"੩\", \"੪\", \"੫\", \"੬\", \"੭\", \"੮\", \"੯\"],\n    hanidec: [\"〇\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\", \"七\", \"八\", \"九\"],\n    khmr: [\"០\", \"១\", \"២\", \"៣\", \"៤\", \"៥\", \"៦\", \"៧\", \"៨\", \"៩\"],\n    knda: [\"೦\", \"೧\", \"೨\", \"೩\", \"೪\", \"೫\", \"೬\", \"೭\", \"೮\", \"೯\"],\n    laoo: [\"໐\", \"໑\", \"໒\", \"໓\", \"໔\", \"໕\", \"໖\", \"໗\", \"໘\", \"໙\"],\n    latn: [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n    limb: [\"᥆\", \"᥇\", \"᥈\", \"᥉\", \"᥊\", \"᥋\", \"᥌\", \"᥍\", \"᥎\", \"᥏\"],\n    mlym: [\"൦\", \"൧\", \"൨\", \"൩\", \"൪\", \"൫\", \"൬\", \"൭\", \"൮\", \"൯\"],\n    mong: [\"᠐\", \"᠑\", \"᠒\", \"᠓\", \"᠔\", \"᠕\", \"᠖\", \"᠗\", \"᠘\", \"᠙\"],\n    mymr: [\"၀\", \"၁\", \"၂\", \"၃\", \"၄\", \"၅\", \"၆\", \"၇\", \"၈\", \"၉\"],\n    orya: [\"୦\", \"୧\", \"୨\", \"୩\", \"୪\", \"୫\", \"୬\", \"୭\", \"୮\", \"୯\"],\n    tamldec: [\"௦\", \"௧\", \"௨\", \"௩\", \"௪\", \"௫\", \"௬\", \"௭\", \"௮\", \"௯\"],\n    telu: [\"౦\", \"౧\", \"౨\", \"౩\", \"౪\", \"౫\", \"౬\", \"౭\", \"౮\", \"౯\"],\n    thai: [\"๐\", \"๑\", \"๒\", \"๓\", \"๔\", \"๕\", \"๖\", \"๗\", \"๘\", \"๙\"],\n    tibt: [\"༠\", \"༡\", \"༢\", \"༣\", \"༤\", \"༥\", \"༦\", \"༧\", \"༨\", \"༩\"]\n};\n\n/**\n * This function provides access to the locale and formatting options computed\n * during initialization of the object.\n *\n * The function returns a new object whose properties and attributes are set as\n * if constructed by an object literal assigning to each of the following\n * properties the value of the corresponding internal property of this\n * NumberFormat object (see 11.4): locale, numberingSystem, style, currency,\n * currencyDisplay, minimumIntegerDigits, minimumFractionDigits,\n * maximumFractionDigits, minimumSignificantDigits, maximumSignificantDigits, and\n * useGrouping. Properties whose corresponding internal properties are not present\n * are not assigned.\n */\n/* 11.3.3 */defineProperty(Intl.NumberFormat.prototype, 'resolvedOptions', {\n    configurable: true,\n    writable: true,\n    value: function value() {\n        var prop = void 0,\n            descs = new Record(),\n            props = ['locale', 'numberingSystem', 'style', 'currency', 'currencyDisplay', 'minimumIntegerDigits', 'minimumFractionDigits', 'maximumFractionDigits', 'minimumSignificantDigits', 'maximumSignificantDigits', 'useGrouping'],\n            internal = this !== null && babelHelpers$1[\"typeof\"](this) === 'object' && getInternalProperties(this);\n\n        // Satisfy test 11.3_b\n        if (!internal || !internal['[[initializedNumberFormat]]']) throw new TypeError('`this` value for resolvedOptions() is not an initialized Intl.NumberFormat object.');\n\n        for (var i = 0, max = props.length; i < max; i++) {\n            if (hop.call(internal, prop = '[[' + props[i] + ']]')) descs[props[i]] = { value: internal[prop], writable: true, configurable: true, enumerable: true };\n        }\n\n        return objCreate({}, descs);\n    }\n});\n\n/* jslint esnext: true */\n\n// Match these datetime components in a CLDR pattern, except those in single quotes\nvar expDTComponents = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;\n// trim patterns after transformations\nvar expPatternTrimmer = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n// Skip over patterns with these datetime components because we don't have data\n// to back them up:\n// timezone, weekday, amoung others\nvar unwantedDTCs = /[rqQASjJgwWIQq]/; // xXVO were removed from this list in favor of computing matches with timeZoneName values but printing as empty string\n\nvar dtKeys = [\"era\", \"year\", \"month\", \"day\", \"weekday\", \"quarter\"];\nvar tmKeys = [\"hour\", \"minute\", \"second\", \"hour12\", \"timeZoneName\"];\n\nfunction isDateFormatOnly(obj) {\n    for (var i = 0; i < tmKeys.length; i += 1) {\n        if (obj.hasOwnProperty(tmKeys[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction isTimeFormatOnly(obj) {\n    for (var i = 0; i < dtKeys.length; i += 1) {\n        if (obj.hasOwnProperty(dtKeys[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction joinDateAndTimeFormats(dateFormatObj, timeFormatObj) {\n    var o = { _: {} };\n    for (var i = 0; i < dtKeys.length; i += 1) {\n        if (dateFormatObj[dtKeys[i]]) {\n            o[dtKeys[i]] = dateFormatObj[dtKeys[i]];\n        }\n        if (dateFormatObj._[dtKeys[i]]) {\n            o._[dtKeys[i]] = dateFormatObj._[dtKeys[i]];\n        }\n    }\n    for (var j = 0; j < tmKeys.length; j += 1) {\n        if (timeFormatObj[tmKeys[j]]) {\n            o[tmKeys[j]] = timeFormatObj[tmKeys[j]];\n        }\n        if (timeFormatObj._[tmKeys[j]]) {\n            o._[tmKeys[j]] = timeFormatObj._[tmKeys[j]];\n        }\n    }\n    return o;\n}\n\nfunction computeFinalPatterns(formatObj) {\n    // From http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Format_Patterns:\n    //  'In patterns, two single quotes represents a literal single quote, either\n    //   inside or outside single quotes. Text within single quotes is not\n    //   interpreted in any way (except for two adjacent single quotes).'\n    formatObj.pattern12 = formatObj.extendedPattern.replace(/'([^']*)'/g, function ($0, literal) {\n        return literal ? literal : \"'\";\n    });\n\n    // pattern 12 is always the default. we can produce the 24 by removing {ampm}\n    formatObj.pattern = formatObj.pattern12.replace('{ampm}', '').replace(expPatternTrimmer, '');\n    return formatObj;\n}\n\nfunction expDTComponentsMeta($0, formatObj) {\n    switch ($0.charAt(0)) {\n        // --- Era\n        case 'G':\n            formatObj.era = ['short', 'short', 'short', 'long', 'narrow'][$0.length - 1];\n            return '{era}';\n\n        // --- Year\n        case 'y':\n        case 'Y':\n        case 'u':\n        case 'U':\n        case 'r':\n            formatObj.year = $0.length === 2 ? '2-digit' : 'numeric';\n            return '{year}';\n\n        // --- Quarter (not supported in this polyfill)\n        case 'Q':\n        case 'q':\n            formatObj.quarter = ['numeric', '2-digit', 'short', 'long', 'narrow'][$0.length - 1];\n            return '{quarter}';\n\n        // --- Month\n        case 'M':\n        case 'L':\n            formatObj.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][$0.length - 1];\n            return '{month}';\n\n        // --- Week (not supported in this polyfill)\n        case 'w':\n            // week of the year\n            formatObj.week = $0.length === 2 ? '2-digit' : 'numeric';\n            return '{weekday}';\n        case 'W':\n            // week of the month\n            formatObj.week = 'numeric';\n            return '{weekday}';\n\n        // --- Day\n        case 'd':\n            // day of the month\n            formatObj.day = $0.length === 2 ? '2-digit' : 'numeric';\n            return '{day}';\n        case 'D': // day of the year\n        case 'F': // day of the week\n        case 'g':\n            // 1..n: Modified Julian day\n            formatObj.day = 'numeric';\n            return '{day}';\n\n        // --- Week Day\n        case 'E':\n            // day of the week\n            formatObj.weekday = ['short', 'short', 'short', 'long', 'narrow', 'short'][$0.length - 1];\n            return '{weekday}';\n        case 'e':\n            // local day of the week\n            formatObj.weekday = ['numeric', '2-digit', 'short', 'long', 'narrow', 'short'][$0.length - 1];\n            return '{weekday}';\n        case 'c':\n            // stand alone local day of the week\n            formatObj.weekday = ['numeric', undefined, 'short', 'long', 'narrow', 'short'][$0.length - 1];\n            return '{weekday}';\n\n        // --- Period\n        case 'a': // AM, PM\n        case 'b': // am, pm, noon, midnight\n        case 'B':\n            // flexible day periods\n            formatObj.hour12 = true;\n            return '{ampm}';\n\n        // --- Hour\n        case 'h':\n        case 'H':\n            formatObj.hour = $0.length === 2 ? '2-digit' : 'numeric';\n            return '{hour}';\n        case 'k':\n        case 'K':\n            formatObj.hour12 = true; // 12-hour-cycle time formats (using h or K)\n            formatObj.hour = $0.length === 2 ? '2-digit' : 'numeric';\n            return '{hour}';\n\n        // --- Minute\n        case 'm':\n            formatObj.minute = $0.length === 2 ? '2-digit' : 'numeric';\n            return '{minute}';\n\n        // --- Second\n        case 's':\n            formatObj.second = $0.length === 2 ? '2-digit' : 'numeric';\n            return '{second}';\n        case 'S':\n        case 'A':\n            formatObj.second = 'numeric';\n            return '{second}';\n\n        // --- Timezone\n        case 'z': // 1..3, 4: specific non-location format\n        case 'Z': // 1..3, 4, 5: The ISO8601 varios formats\n        case 'O': // 1, 4: miliseconds in day short, long\n        case 'v': // 1, 4: generic non-location format\n        case 'V': // 1, 2, 3, 4: time zone ID or city\n        case 'X': // 1, 2, 3, 4: The ISO8601 varios formats\n        case 'x':\n            // 1, 2, 3, 4: The ISO8601 varios formats\n            // this polyfill only supports much, for now, we are just doing something dummy\n            formatObj.timeZoneName = $0.length < 4 ? 'short' : 'long';\n            return '{timeZoneName}';\n    }\n}\n\n/**\n * Converts the CLDR availableFormats into the objects and patterns required by\n * the ECMAScript Internationalization API specification.\n */\nfunction createDateTimeFormat(skeleton, pattern) {\n    // we ignore certain patterns that are unsupported to avoid this expensive op.\n    if (unwantedDTCs.test(pattern)) return undefined;\n\n    var formatObj = {\n        originalPattern: pattern,\n        _: {}\n    };\n\n    // Replace the pattern string with the one required by the specification, whilst\n    // at the same time evaluating it for the subsets and formats\n    formatObj.extendedPattern = pattern.replace(expDTComponents, function ($0) {\n        // See which symbol we're dealing with\n        return expDTComponentsMeta($0, formatObj._);\n    });\n\n    // Match the skeleton string with the one required by the specification\n    // this implementation is based on the Date Field Symbol Table:\n    // http://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n    // Note: we are adding extra data to the formatObject even though this polyfill\n    //       might not support it.\n    skeleton.replace(expDTComponents, function ($0) {\n        // See which symbol we're dealing with\n        return expDTComponentsMeta($0, formatObj);\n    });\n\n    return computeFinalPatterns(formatObj);\n}\n\n/**\n * Processes DateTime formats from CLDR to an easier-to-parse format.\n * the result of this operation should be cached the first time a particular\n * calendar is analyzed.\n *\n * The specification requires we support at least the following subsets of\n * date/time components:\n *\n *   - 'weekday', 'year', 'month', 'day', 'hour', 'minute', 'second'\n *   - 'weekday', 'year', 'month', 'day'\n *   - 'year', 'month', 'day'\n *   - 'year', 'month'\n *   - 'month', 'day'\n *   - 'hour', 'minute', 'second'\n *   - 'hour', 'minute'\n *\n * We need to cherry pick at least these subsets from the CLDR data and convert\n * them into the pattern objects used in the ECMA-402 API.\n */\nfunction createDateTimeFormats(formats) {\n    var availableFormats = formats.availableFormats;\n    var timeFormats = formats.timeFormats;\n    var dateFormats = formats.dateFormats;\n    var result = [];\n    var skeleton = void 0,\n        pattern = void 0,\n        computed = void 0,\n        i = void 0,\n        j = void 0;\n    var timeRelatedFormats = [];\n    var dateRelatedFormats = [];\n\n    // Map available (custom) formats into a pattern for createDateTimeFormats\n    for (skeleton in availableFormats) {\n        if (availableFormats.hasOwnProperty(skeleton)) {\n            pattern = availableFormats[skeleton];\n            computed = createDateTimeFormat(skeleton, pattern);\n            if (computed) {\n                result.push(computed);\n                // in some cases, the format is only displaying date specific props\n                // or time specific props, in which case we need to also produce the\n                // combined formats.\n                if (isDateFormatOnly(computed)) {\n                    dateRelatedFormats.push(computed);\n                } else if (isTimeFormatOnly(computed)) {\n                    timeRelatedFormats.push(computed);\n                }\n            }\n        }\n    }\n\n    // Map time formats into a pattern for createDateTimeFormats\n    for (skeleton in timeFormats) {\n        if (timeFormats.hasOwnProperty(skeleton)) {\n            pattern = timeFormats[skeleton];\n            computed = createDateTimeFormat(skeleton, pattern);\n            if (computed) {\n                result.push(computed);\n                timeRelatedFormats.push(computed);\n            }\n        }\n    }\n\n    // Map date formats into a pattern for createDateTimeFormats\n    for (skeleton in dateFormats) {\n        if (dateFormats.hasOwnProperty(skeleton)) {\n            pattern = dateFormats[skeleton];\n            computed = createDateTimeFormat(skeleton, pattern);\n            if (computed) {\n                result.push(computed);\n                dateRelatedFormats.push(computed);\n            }\n        }\n    }\n\n    // combine custom time and custom date formats when they are orthogonals to complete the\n    // formats supported by CLDR.\n    // This Algo is based on section \"Missing Skeleton Fields\" from:\n    // http://unicode.org/reports/tr35/tr35-dates.html#availableFormats_appendItems\n    for (i = 0; i < timeRelatedFormats.length; i += 1) {\n        for (j = 0; j < dateRelatedFormats.length; j += 1) {\n            if (dateRelatedFormats[j].month === 'long') {\n                pattern = dateRelatedFormats[j].weekday ? formats.full : formats.long;\n            } else if (dateRelatedFormats[j].month === 'short') {\n                pattern = formats.medium;\n            } else {\n                pattern = formats.short;\n            }\n            computed = joinDateAndTimeFormats(dateRelatedFormats[j], timeRelatedFormats[i]);\n            computed.originalPattern = pattern;\n            computed.extendedPattern = pattern.replace('{0}', timeRelatedFormats[i].extendedPattern).replace('{1}', dateRelatedFormats[j].extendedPattern).replace(/^[,\\s]+|[,\\s]+$/gi, '');\n            result.push(computeFinalPatterns(computed));\n        }\n    }\n\n    return result;\n}\n\n// this represents the exceptions of the rule that are not covered by CLDR availableFormats\n// for single property configurations, they play no role when using multiple properties, and\n// those that are not in this table, are not exceptions or are not covered by the data we\n// provide.\nvar validSyntheticProps = {\n    second: {\n        numeric: 's',\n        '2-digit': 'ss'\n    },\n    minute: {\n        numeric: 'm',\n        '2-digit': 'mm'\n    },\n    year: {\n        numeric: 'y',\n        '2-digit': 'yy'\n    },\n    day: {\n        numeric: 'd',\n        '2-digit': 'dd'\n    },\n    month: {\n        numeric: 'L',\n        '2-digit': 'LL',\n        narrow: 'LLLLL',\n        short: 'LLL',\n        long: 'LLLL'\n    },\n    weekday: {\n        narrow: 'ccccc',\n        short: 'ccc',\n        long: 'cccc'\n    }\n};\n\nfunction generateSyntheticFormat(propName, propValue) {\n    if (validSyntheticProps[propName] && validSyntheticProps[propName][propValue]) {\n        var _ref2;\n\n        return _ref2 = {\n            originalPattern: validSyntheticProps[propName][propValue],\n            _: defineProperty$1({}, propName, propValue),\n            extendedPattern: \"{\" + propName + \"}\"\n        }, defineProperty$1(_ref2, propName, propValue), defineProperty$1(_ref2, \"pattern12\", \"{\" + propName + \"}\"), defineProperty$1(_ref2, \"pattern\", \"{\" + propName + \"}\"), _ref2;\n    }\n}\n\n// An object map of date component keys, saves using a regex later\nvar dateWidths = objCreate(null, { narrow: {}, short: {}, long: {} });\n\n/**\n * Returns a string for a date component, resolved using multiple inheritance as specified\n * as specified in the Unicode Technical Standard 35.\n */\nfunction resolveDateString(data, ca, component, width, key) {\n    // From http://www.unicode.org/reports/tr35/tr35.html#Multiple_Inheritance:\n    // 'In clearly specified instances, resources may inherit from within the same locale.\n    //  For example, ... the Buddhist calendar inherits from the Gregorian calendar.'\n    var obj = data[ca] && data[ca][component] ? data[ca][component] : data.gregory[component],\n\n\n    // \"sideways\" inheritance resolves strings when a key doesn't exist\n    alts = {\n        narrow: ['short', 'long'],\n        short: ['long', 'narrow'],\n        long: ['short', 'narrow']\n    },\n\n\n    //\n    resolved = hop.call(obj, width) ? obj[width] : hop.call(obj, alts[width][0]) ? obj[alts[width][0]] : obj[alts[width][1]];\n\n    // `key` wouldn't be specified for components 'dayPeriods'\n    return key !== null ? resolved[key] : resolved;\n}\n\n// Define the DateTimeFormat constructor internally so it cannot be tainted\nfunction DateTimeFormatConstructor() {\n    var locales = arguments[0];\n    var options = arguments[1];\n\n    if (!this || this === Intl) {\n        return new Intl.DateTimeFormat(locales, options);\n    }\n    return InitializeDateTimeFormat(toObject(this), locales, options);\n}\n\ndefineProperty(Intl, 'DateTimeFormat', {\n    configurable: true,\n    writable: true,\n    value: DateTimeFormatConstructor\n});\n\n// Must explicitly set prototypes as unwritable\ndefineProperty(DateTimeFormatConstructor, 'prototype', {\n    writable: false\n});\n\n/**\n * The abstract operation InitializeDateTimeFormat accepts the arguments dateTimeFormat\n * (which must be an object), locales, and options. It initializes dateTimeFormat as a\n * DateTimeFormat object.\n */\nfunction /* 12.1.1.1 */InitializeDateTimeFormat(dateTimeFormat, locales, options) {\n    // This will be a internal properties object if we're not already initialized\n    var internal = getInternalProperties(dateTimeFormat);\n\n    // Create an object whose props can be used to restore the values of RegExp props\n    var regexpRestore = createRegExpRestore();\n\n    // 1. If dateTimeFormat has an [[initializedIntlObject]] internal property with\n    //    value true, throw a TypeError exception.\n    if (internal['[[initializedIntlObject]]'] === true) throw new TypeError('`this` object has already been initialized as an Intl object');\n\n    // Need this to access the `internal` object\n    defineProperty(dateTimeFormat, '__getInternalProperties', {\n        value: function value() {\n            // NOTE: Non-standard, for internal use only\n            if (arguments[0] === secret) return internal;\n        }\n    });\n\n    // 2. Set the [[initializedIntlObject]] internal property of numberFormat to true.\n    internal['[[initializedIntlObject]]'] = true;\n\n    // 3. Let requestedLocales be the result of calling the CanonicalizeLocaleList\n    //    abstract operation (defined in 9.2.1) with argument locales.\n    var requestedLocales = CanonicalizeLocaleList(locales);\n\n    // 4. Let options be the result of calling the ToDateTimeOptions abstract\n    //    operation (defined below) with arguments options, \"any\", and \"date\".\n    options = ToDateTimeOptions(options, 'any', 'date');\n\n    // 5. Let opt be a new Record.\n    var opt = new Record();\n\n    // 6. Let matcher be the result of calling the GetOption abstract operation\n    //    (defined in 9.2.9) with arguments options, \"localeMatcher\", \"string\", a List\n    //    containing the two String values \"lookup\" and \"best fit\", and \"best fit\".\n    var matcher = GetOption(options, 'localeMatcher', 'string', new List('lookup', 'best fit'), 'best fit');\n\n    // 7. Set opt.[[localeMatcher]] to matcher.\n    opt['[[localeMatcher]]'] = matcher;\n\n    // 8. Let DateTimeFormat be the standard built-in object that is the initial\n    //    value of Intl.DateTimeFormat.\n    var DateTimeFormat = internals.DateTimeFormat; // This is what we *really* need\n\n    // 9. Let localeData be the value of the [[localeData]] internal property of\n    //    DateTimeFormat.\n    var localeData = DateTimeFormat['[[localeData]]'];\n\n    // 10. Let r be the result of calling the ResolveLocale abstract operation\n    //     (defined in 9.2.5) with the [[availableLocales]] internal property of\n    //      DateTimeFormat, requestedLocales, opt, the [[relevantExtensionKeys]]\n    //      internal property of DateTimeFormat, and localeData.\n    var r = ResolveLocale(DateTimeFormat['[[availableLocales]]'], requestedLocales, opt, DateTimeFormat['[[relevantExtensionKeys]]'], localeData);\n\n    // 11. Set the [[locale]] internal property of dateTimeFormat to the value of\n    //     r.[[locale]].\n    internal['[[locale]]'] = r['[[locale]]'];\n\n    // 12. Set the [[calendar]] internal property of dateTimeFormat to the value of\n    //     r.[[ca]].\n    internal['[[calendar]]'] = r['[[ca]]'];\n\n    // 13. Set the [[numberingSystem]] internal property of dateTimeFormat to the value of\n    //     r.[[nu]].\n    internal['[[numberingSystem]]'] = r['[[nu]]'];\n\n    // The specification doesn't tell us to do this, but it's helpful later on\n    internal['[[dataLocale]]'] = r['[[dataLocale]]'];\n\n    // 14. Let dataLocale be the value of r.[[dataLocale]].\n    var dataLocale = r['[[dataLocale]]'];\n\n    // 15. Let tz be the result of calling the [[Get]] internal method of options with\n    //     argument \"timeZone\".\n    var tz = options.timeZone;\n\n    // 16. If tz is not undefined, then\n    if (tz !== undefined) {\n        // a. Let tz be ToString(tz).\n        // b. Convert tz to upper case as described in 6.1.\n        //    NOTE: If an implementation accepts additional time zone values, as permitted\n        //          under certain conditions by the Conformance clause, different casing\n        //          rules apply.\n        tz = toLatinUpperCase(tz);\n\n        // c. If tz is not \"UTC\", then throw a RangeError exception.\n        // ###TODO: accept more time zones###\n        if (tz !== 'UTC') throw new RangeError('timeZone is not supported.');\n    }\n\n    // 17. Set the [[timeZone]] internal property of dateTimeFormat to tz.\n    internal['[[timeZone]]'] = tz;\n\n    // 18. Let opt be a new Record.\n    opt = new Record();\n\n    // 19. For each row of Table 3, except the header row, do:\n    for (var prop in dateTimeComponents) {\n        if (!hop.call(dateTimeComponents, prop)) continue;\n\n        // 20. Let prop be the name given in the Property column of the row.\n        // 21. Let value be the result of calling the GetOption abstract operation,\n        //     passing as argument options, the name given in the Property column of the\n        //     row, \"string\", a List containing the strings given in the Values column of\n        //     the row, and undefined.\n        var value = GetOption(options, prop, 'string', dateTimeComponents[prop]);\n\n        // 22. Set opt.[[<prop>]] to value.\n        opt['[[' + prop + ']]'] = value;\n    }\n\n    // Assigned a value below\n    var bestFormat = void 0;\n\n    // 23. Let dataLocaleData be the result of calling the [[Get]] internal method of\n    //     localeData with argument dataLocale.\n    var dataLocaleData = localeData[dataLocale];\n\n    // 24. Let formats be the result of calling the [[Get]] internal method of\n    //     dataLocaleData with argument \"formats\".\n    //     Note: we process the CLDR formats into the spec'd structure\n    var formats = ToDateTimeFormats(dataLocaleData.formats);\n\n    // 25. Let matcher be the result of calling the GetOption abstract operation with\n    //     arguments options, \"formatMatcher\", \"string\", a List containing the two String\n    //     values \"basic\" and \"best fit\", and \"best fit\".\n    matcher = GetOption(options, 'formatMatcher', 'string', new List('basic', 'best fit'), 'best fit');\n\n    // Optimization: caching the processed formats as a one time operation by\n    // replacing the initial structure from localeData\n    dataLocaleData.formats = formats;\n\n    // 26. If matcher is \"basic\", then\n    if (matcher === 'basic') {\n        // 27. Let bestFormat be the result of calling the BasicFormatMatcher abstract\n        //     operation (defined below) with opt and formats.\n        bestFormat = BasicFormatMatcher(opt, formats);\n\n        // 28. Else\n    } else {\n        {\n            // diverging\n            var _hr = GetOption(options, 'hour12', 'boolean' /*, undefined, undefined*/);\n            opt.hour12 = _hr === undefined ? dataLocaleData.hour12 : _hr;\n        }\n        // 29. Let bestFormat be the result of calling the BestFitFormatMatcher\n        //     abstract operation (defined below) with opt and formats.\n        bestFormat = BestFitFormatMatcher(opt, formats);\n    }\n\n    // 30. For each row in Table 3, except the header row, do\n    for (var _prop in dateTimeComponents) {\n        if (!hop.call(dateTimeComponents, _prop)) continue;\n\n        // a. Let prop be the name given in the Property column of the row.\n        // b. Let pDesc be the result of calling the [[GetOwnProperty]] internal method of\n        //    bestFormat with argument prop.\n        // c. If pDesc is not undefined, then\n        if (hop.call(bestFormat, _prop)) {\n            // i. Let p be the result of calling the [[Get]] internal method of bestFormat\n            //    with argument prop.\n            var p = bestFormat[_prop];\n            {\n                // diverging\n                p = bestFormat._ && hop.call(bestFormat._, _prop) ? bestFormat._[_prop] : p;\n            }\n\n            // ii. Set the [[<prop>]] internal property of dateTimeFormat to p.\n            internal['[[' + _prop + ']]'] = p;\n        }\n    }\n\n    var pattern = void 0; // Assigned a value below\n\n    // 31. Let hr12 be the result of calling the GetOption abstract operation with\n    //     arguments options, \"hour12\", \"boolean\", undefined, and undefined.\n    var hr12 = GetOption(options, 'hour12', 'boolean' /*, undefined, undefined*/);\n\n    // 32. If dateTimeFormat has an internal property [[hour]], then\n    if (internal['[[hour]]']) {\n        // a. If hr12 is undefined, then let hr12 be the result of calling the [[Get]]\n        //    internal method of dataLocaleData with argument \"hour12\".\n        hr12 = hr12 === undefined ? dataLocaleData.hour12 : hr12;\n\n        // b. Set the [[hour12]] internal property of dateTimeFormat to hr12.\n        internal['[[hour12]]'] = hr12;\n\n        // c. If hr12 is true, then\n        if (hr12 === true) {\n            // i. Let hourNo0 be the result of calling the [[Get]] internal method of\n            //    dataLocaleData with argument \"hourNo0\".\n            var hourNo0 = dataLocaleData.hourNo0;\n\n            // ii. Set the [[hourNo0]] internal property of dateTimeFormat to hourNo0.\n            internal['[[hourNo0]]'] = hourNo0;\n\n            // iii. Let pattern be the result of calling the [[Get]] internal method of\n            //      bestFormat with argument \"pattern12\".\n            pattern = bestFormat.pattern12;\n        }\n\n        // d. Else\n        else\n            // i. Let pattern be the result of calling the [[Get]] internal method of\n            //    bestFormat with argument \"pattern\".\n            pattern = bestFormat.pattern;\n    }\n\n    // 33. Else\n    else\n        // a. Let pattern be the result of calling the [[Get]] internal method of\n        //    bestFormat with argument \"pattern\".\n        pattern = bestFormat.pattern;\n\n    // 34. Set the [[pattern]] internal property of dateTimeFormat to pattern.\n    internal['[[pattern]]'] = pattern;\n\n    // 35. Set the [[boundFormat]] internal property of dateTimeFormat to undefined.\n    internal['[[boundFormat]]'] = undefined;\n\n    // 36. Set the [[initializedDateTimeFormat]] internal property of dateTimeFormat to\n    //     true.\n    internal['[[initializedDateTimeFormat]]'] = true;\n\n    // In ES3, we need to pre-bind the format() function\n    if (es3) dateTimeFormat.format = GetFormatDateTime.call(dateTimeFormat);\n\n    // Restore the RegExp properties\n    regexpRestore();\n\n    // Return the newly initialised object\n    return dateTimeFormat;\n}\n\n/**\n * Several DateTimeFormat algorithms use values from the following table, which provides\n * property names and allowable values for the components of date and time formats:\n */\nvar dateTimeComponents = {\n    weekday: [\"narrow\", \"short\", \"long\"],\n    era: [\"narrow\", \"short\", \"long\"],\n    year: [\"2-digit\", \"numeric\"],\n    month: [\"2-digit\", \"numeric\", \"narrow\", \"short\", \"long\"],\n    day: [\"2-digit\", \"numeric\"],\n    hour: [\"2-digit\", \"numeric\"],\n    minute: [\"2-digit\", \"numeric\"],\n    second: [\"2-digit\", \"numeric\"],\n    timeZoneName: [\"short\", \"long\"]\n};\n\n/**\n * When the ToDateTimeOptions abstract operation is called with arguments options,\n * required, and defaults, the following steps are taken:\n */\nfunction ToDateTimeFormats(formats) {\n    if (Object.prototype.toString.call(formats) === '[object Array]') {\n        return formats;\n    }\n    return createDateTimeFormats(formats);\n}\n\n/**\n * When the ToDateTimeOptions abstract operation is called with arguments options,\n * required, and defaults, the following steps are taken:\n */\nfunction ToDateTimeOptions(options, required, defaults) {\n    // 1. If options is undefined, then let options be null, else let options be\n    //    ToObject(options).\n    if (options === undefined) options = null;else {\n        // (#12) options needs to be a Record, but it also needs to inherit properties\n        var opt2 = toObject(options);\n        options = new Record();\n\n        for (var k in opt2) {\n            options[k] = opt2[k];\n        }\n    }\n\n    // 2. Let create be the standard built-in function object defined in ES5, 15.2.3.5.\n    var create = objCreate;\n\n    // 3. Let options be the result of calling the [[Call]] internal method of create with\n    //    undefined as the this value and an argument list containing the single item\n    //    options.\n    options = create(options);\n\n    // 4. Let needDefaults be true.\n    var needDefaults = true;\n\n    // 5. If required is \"date\" or \"any\", then\n    if (required === 'date' || required === 'any') {\n        // a. For each of the property names \"weekday\", \"year\", \"month\", \"day\":\n        // i. If the result of calling the [[Get]] internal method of options with the\n        //    property name is not undefined, then let needDefaults be false.\n        if (options.weekday !== undefined || options.year !== undefined || options.month !== undefined || options.day !== undefined) needDefaults = false;\n    }\n\n    // 6. If required is \"time\" or \"any\", then\n    if (required === 'time' || required === 'any') {\n        // a. For each of the property names \"hour\", \"minute\", \"second\":\n        // i. If the result of calling the [[Get]] internal method of options with the\n        //    property name is not undefined, then let needDefaults be false.\n        if (options.hour !== undefined || options.minute !== undefined || options.second !== undefined) needDefaults = false;\n    }\n\n    // 7. If needDefaults is true and defaults is either \"date\" or \"all\", then\n    if (needDefaults && (defaults === 'date' || defaults === 'all'))\n        // a. For each of the property names \"year\", \"month\", \"day\":\n        // i. Call the [[DefineOwnProperty]] internal method of options with the\n        //    property name, Property Descriptor {[[Value]]: \"numeric\", [[Writable]]:\n        //    true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\n        options.year = options.month = options.day = 'numeric';\n\n    // 8. If needDefaults is true and defaults is either \"time\" or \"all\", then\n    if (needDefaults && (defaults === 'time' || defaults === 'all'))\n        // a. For each of the property names \"hour\", \"minute\", \"second\":\n        // i. Call the [[DefineOwnProperty]] internal method of options with the\n        //    property name, Property Descriptor {[[Value]]: \"numeric\", [[Writable]]:\n        //    true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\n        options.hour = options.minute = options.second = 'numeric';\n\n    // 9. Return options.\n    return options;\n}\n\n/**\n * When the BasicFormatMatcher abstract operation is called with two arguments options and\n * formats, the following steps are taken:\n */\nfunction BasicFormatMatcher(options, formats) {\n    // 1. Let removalPenalty be 120.\n    var removalPenalty = 120;\n\n    // 2. Let additionPenalty be 20.\n    var additionPenalty = 20;\n\n    // 3. Let longLessPenalty be 8.\n    var longLessPenalty = 8;\n\n    // 4. Let longMorePenalty be 6.\n    var longMorePenalty = 6;\n\n    // 5. Let shortLessPenalty be 6.\n    var shortLessPenalty = 6;\n\n    // 6. Let shortMorePenalty be 3.\n    var shortMorePenalty = 3;\n\n    // 7. Let bestScore be -Infinity.\n    var bestScore = -Infinity;\n\n    // 8. Let bestFormat be undefined.\n    var bestFormat = void 0;\n\n    // 9. Let i be 0.\n    var i = 0;\n\n    // 10. Assert: formats is an Array object.\n\n    // 11. Let len be the result of calling the [[Get]] internal method of formats with argument \"length\".\n    var len = formats.length;\n\n    // 12. Repeat while i < len:\n    while (i < len) {\n        // a. Let format be the result of calling the [[Get]] internal method of formats with argument ToString(i).\n        var format = formats[i];\n\n        // b. Let score be 0.\n        var score = 0;\n\n        // c. For each property shown in Table 3:\n        for (var property in dateTimeComponents) {\n            if (!hop.call(dateTimeComponents, property)) continue;\n\n            // i. Let optionsProp be options.[[<property>]].\n            var optionsProp = options['[[' + property + ']]'];\n\n            // ii. Let formatPropDesc be the result of calling the [[GetOwnProperty]] internal method of format\n            //     with argument property.\n            // iii. If formatPropDesc is not undefined, then\n            //     1. Let formatProp be the result of calling the [[Get]] internal method of format with argument property.\n            var formatProp = hop.call(format, property) ? format[property] : undefined;\n\n            // iv. If optionsProp is undefined and formatProp is not undefined, then decrease score by\n            //     additionPenalty.\n            if (optionsProp === undefined && formatProp !== undefined) score -= additionPenalty;\n\n            // v. Else if optionsProp is not undefined and formatProp is undefined, then decrease score by\n            //    removalPenalty.\n            else if (optionsProp !== undefined && formatProp === undefined) score -= removalPenalty;\n\n                // vi. Else\n                else {\n                        // 1. Let values be the array [\"2-digit\", \"numeric\", \"narrow\", \"short\",\n                        //    \"long\"].\n                        var values = ['2-digit', 'numeric', 'narrow', 'short', 'long'];\n\n                        // 2. Let optionsPropIndex be the index of optionsProp within values.\n                        var optionsPropIndex = arrIndexOf.call(values, optionsProp);\n\n                        // 3. Let formatPropIndex be the index of formatProp within values.\n                        var formatPropIndex = arrIndexOf.call(values, formatProp);\n\n                        // 4. Let delta be max(min(formatPropIndex - optionsPropIndex, 2), -2).\n                        var delta = Math.max(Math.min(formatPropIndex - optionsPropIndex, 2), -2);\n\n                        // 5. If delta = 2, decrease score by longMorePenalty.\n                        if (delta === 2) score -= longMorePenalty;\n\n                        // 6. Else if delta = 1, decrease score by shortMorePenalty.\n                        else if (delta === 1) score -= shortMorePenalty;\n\n                            // 7. Else if delta = -1, decrease score by shortLessPenalty.\n                            else if (delta === -1) score -= shortLessPenalty;\n\n                                // 8. Else if delta = -2, decrease score by longLessPenalty.\n                                else if (delta === -2) score -= longLessPenalty;\n                    }\n        }\n\n        // d. If score > bestScore, then\n        if (score > bestScore) {\n            // i. Let bestScore be score.\n            bestScore = score;\n\n            // ii. Let bestFormat be format.\n            bestFormat = format;\n        }\n\n        // e. Increase i by 1.\n        i++;\n    }\n\n    // 13. Return bestFormat.\n    return bestFormat;\n}\n\n/**\n * When the BestFitFormatMatcher abstract operation is called with two arguments options\n * and formats, it performs implementation dependent steps, which should return a set of\n * component representations that a typical user of the selected locale would perceive as\n * at least as good as the one returned by BasicFormatMatcher.\n *\n * This polyfill defines the algorithm to be the same as BasicFormatMatcher,\n * with the addition of bonus points awarded where the requested format is of\n * the same data type as the potentially matching format.\n *\n * This algo relies on the concept of closest distance matching described here:\n * http://unicode.org/reports/tr35/tr35-dates.html#Matching_Skeletons\n * Typically a “best match” is found using a closest distance match, such as:\n *\n * Symbols requesting a best choice for the locale are replaced.\n *      j → one of {H, k, h, K}; C → one of {a, b, B}\n * -> Covered by cldr.js matching process\n *\n * For fields with symbols representing the same type (year, month, day, etc):\n *     Most symbols have a small distance from each other.\n *         M ≅ L; E ≅ c; a ≅ b ≅ B; H ≅ k ≅ h ≅ K; ...\n *     -> Covered by cldr.js matching process\n *\n *     Width differences among fields, other than those marking text vs numeric, are given small distance from each other.\n *         MMM ≅ MMMM\n *         MM ≅ M\n *     Numeric and text fields are given a larger distance from each other.\n *         MMM ≈ MM\n *     Symbols representing substantial differences (week of year vs week of month) are given much larger a distances from each other.\n *         d ≋ D; ...\n *     Missing or extra fields cause a match to fail. (But see Missing Skeleton Fields).\n *\n *\n * For example,\n *\n *     { month: 'numeric', day: 'numeric' }\n *\n * should match\n *\n *     { month: '2-digit', day: '2-digit' }\n *\n * rather than\n *\n *     { month: 'short', day: 'numeric' }\n *\n * This makes sense because a user requesting a formatted date with numeric parts would\n * not expect to see the returned format containing narrow, short or long part names\n */\nfunction BestFitFormatMatcher(options, formats) {\n    /** Diverging: this block implements the hack for single property configuration, eg.:\n     *\n     *      `new Intl.DateTimeFormat('en', {day: 'numeric'})`\n     *\n     * should produce a single digit with the day of the month. This is needed because\n     * CLDR `availableFormats` data structure doesn't cover these cases.\n     */\n    {\n        var optionsPropNames = [];\n        for (var property in dateTimeComponents) {\n            if (!hop.call(dateTimeComponents, property)) continue;\n\n            if (options['[[' + property + ']]'] !== undefined) {\n                optionsPropNames.push(property);\n            }\n        }\n        if (optionsPropNames.length === 1) {\n            var _bestFormat = generateSyntheticFormat(optionsPropNames[0], options['[[' + optionsPropNames[0] + ']]']);\n            if (_bestFormat) {\n                return _bestFormat;\n            }\n        }\n    }\n\n    // 1. Let removalPenalty be 120.\n    var removalPenalty = 120;\n\n    // 2. Let additionPenalty be 20.\n    var additionPenalty = 20;\n\n    // 3. Let longLessPenalty be 8.\n    var longLessPenalty = 8;\n\n    // 4. Let longMorePenalty be 6.\n    var longMorePenalty = 6;\n\n    // 5. Let shortLessPenalty be 6.\n    var shortLessPenalty = 6;\n\n    // 6. Let shortMorePenalty be 3.\n    var shortMorePenalty = 3;\n\n    var patternPenalty = 2;\n\n    var hour12Penalty = 1;\n\n    // 7. Let bestScore be -Infinity.\n    var bestScore = -Infinity;\n\n    // 8. Let bestFormat be undefined.\n    var bestFormat = void 0;\n\n    // 9. Let i be 0.\n    var i = 0;\n\n    // 10. Assert: formats is an Array object.\n\n    // 11. Let len be the result of calling the [[Get]] internal method of formats with argument \"length\".\n    var len = formats.length;\n\n    // 12. Repeat while i < len:\n    while (i < len) {\n        // a. Let format be the result of calling the [[Get]] internal method of formats with argument ToString(i).\n        var format = formats[i];\n\n        // b. Let score be 0.\n        var score = 0;\n\n        // c. For each property shown in Table 3:\n        for (var _property in dateTimeComponents) {\n            if (!hop.call(dateTimeComponents, _property)) continue;\n\n            // i. Let optionsProp be options.[[<property>]].\n            var optionsProp = options['[[' + _property + ']]'];\n\n            // ii. Let formatPropDesc be the result of calling the [[GetOwnProperty]] internal method of format\n            //     with argument property.\n            // iii. If formatPropDesc is not undefined, then\n            //     1. Let formatProp be the result of calling the [[Get]] internal method of format with argument property.\n            var formatProp = hop.call(format, _property) ? format[_property] : undefined;\n\n            // Diverging: using the default properties produced by the pattern/skeleton\n            // to match it with user options, and apply a penalty\n            var patternProp = hop.call(format._, _property) ? format._[_property] : undefined;\n            if (optionsProp !== patternProp) {\n                score -= patternPenalty;\n            }\n\n            // iv. If optionsProp is undefined and formatProp is not undefined, then decrease score by\n            //     additionPenalty.\n            if (optionsProp === undefined && formatProp !== undefined) score -= additionPenalty;\n\n            // v. Else if optionsProp is not undefined and formatProp is undefined, then decrease score by\n            //    removalPenalty.\n            else if (optionsProp !== undefined && formatProp === undefined) score -= removalPenalty;\n\n                // vi. Else\n                else {\n                        // 1. Let values be the array [\"2-digit\", \"numeric\", \"narrow\", \"short\",\n                        //    \"long\"].\n                        var values = ['2-digit', 'numeric', 'narrow', 'short', 'long'];\n\n                        // 2. Let optionsPropIndex be the index of optionsProp within values.\n                        var optionsPropIndex = arrIndexOf.call(values, optionsProp);\n\n                        // 3. Let formatPropIndex be the index of formatProp within values.\n                        var formatPropIndex = arrIndexOf.call(values, formatProp);\n\n                        // 4. Let delta be max(min(formatPropIndex - optionsPropIndex, 2), -2).\n                        var delta = Math.max(Math.min(formatPropIndex - optionsPropIndex, 2), -2);\n\n                        {\n                            // diverging from spec\n                            // When the bestFit argument is true, subtract additional penalty where data types are not the same\n                            if (formatPropIndex <= 1 && optionsPropIndex >= 2 || formatPropIndex >= 2 && optionsPropIndex <= 1) {\n                                // 5. If delta = 2, decrease score by longMorePenalty.\n                                if (delta > 0) score -= longMorePenalty;else if (delta < 0) score -= longLessPenalty;\n                            } else {\n                                // 5. If delta = 2, decrease score by longMorePenalty.\n                                if (delta > 1) score -= shortMorePenalty;else if (delta < -1) score -= shortLessPenalty;\n                            }\n                        }\n                    }\n        }\n\n        {\n            // diverging to also take into consideration differences between 12 or 24 hours\n            // which is special for the best fit only.\n            if (format._.hour12 !== options.hour12) {\n                score -= hour12Penalty;\n            }\n        }\n\n        // d. If score > bestScore, then\n        if (score > bestScore) {\n            // i. Let bestScore be score.\n            bestScore = score;\n            // ii. Let bestFormat be format.\n            bestFormat = format;\n        }\n\n        // e. Increase i by 1.\n        i++;\n    }\n\n    // 13. Return bestFormat.\n    return bestFormat;\n}\n\n/* 12.2.3 */internals.DateTimeFormat = {\n    '[[availableLocales]]': [],\n    '[[relevantExtensionKeys]]': ['ca', 'nu'],\n    '[[localeData]]': {}\n};\n\n/**\n * When the supportedLocalesOf method of Intl.DateTimeFormat is called, the\n * following steps are taken:\n */\n/* 12.2.2 */\ndefineProperty(Intl.DateTimeFormat, 'supportedLocalesOf', {\n    configurable: true,\n    writable: true,\n    value: fnBind.call(function (locales) {\n        // Bound functions only have the `this` value altered if being used as a constructor,\n        // this lets us imitate a native function that has no constructor\n        if (!hop.call(this, '[[availableLocales]]')) throw new TypeError('supportedLocalesOf() is not a constructor');\n\n        // Create an object whose props can be used to restore the values of RegExp props\n        var regexpRestore = createRegExpRestore(),\n\n\n        // 1. If options is not provided, then let options be undefined.\n        options = arguments[1],\n\n\n        // 2. Let availableLocales be the value of the [[availableLocales]] internal\n        //    property of the standard built-in object that is the initial value of\n        //    Intl.NumberFormat.\n\n        availableLocales = this['[[availableLocales]]'],\n\n\n        // 3. Let requestedLocales be the result of calling the CanonicalizeLocaleList\n        //    abstract operation (defined in 9.2.1) with argument locales.\n        requestedLocales = CanonicalizeLocaleList(locales);\n\n        // Restore the RegExp properties\n        regexpRestore();\n\n        // 4. Return the result of calling the SupportedLocales abstract operation\n        //    (defined in 9.2.8) with arguments availableLocales, requestedLocales,\n        //    and options.\n        return SupportedLocales(availableLocales, requestedLocales, options);\n    }, internals.NumberFormat)\n});\n\n/**\n * This named accessor property returns a function that formats a number\n * according to the effective locale and the formatting options of this\n * DateTimeFormat object.\n */\n/* 12.3.2 */defineProperty(Intl.DateTimeFormat.prototype, 'format', {\n    configurable: true,\n    get: GetFormatDateTime\n});\n\nfunction GetFormatDateTime() {\n    var internal = this !== null && babelHelpers$1[\"typeof\"](this) === 'object' && getInternalProperties(this);\n\n    // Satisfy test 12.3_b\n    if (!internal || !internal['[[initializedDateTimeFormat]]']) throw new TypeError('`this` value for format() is not an initialized Intl.DateTimeFormat object.');\n\n    // The value of the [[Get]] attribute is a function that takes the following\n    // steps:\n\n    // 1. If the [[boundFormat]] internal property of this DateTimeFormat object\n    //    is undefined, then:\n    if (internal['[[boundFormat]]'] === undefined) {\n        // a. Let F be a Function object, with internal properties set as\n        //    specified for built-in functions in ES5, 15, or successor, and the\n        //    length property set to 0, that takes the argument date and\n        //    performs the following steps:\n        var F = function F() {\n            var date = arguments.length <= 0 || arguments[0] === undefined ? undefined : arguments[0];\n\n            //   i. If date is not provided or is undefined, then let x be the\n            //      result as if by the expression Date.now() where Date.now is\n            //      the standard built-in function defined in ES5, 15.9.4.4.\n            //  ii. Else let x be ToNumber(date).\n            // iii. Return the result of calling the FormatDateTime abstract\n            //      operation (defined below) with arguments this and x.\n            var x = date === undefined ? Date.now() : toNumber(date);\n            return FormatDateTime(this, x);\n        };\n        // b. Let bind be the standard built-in function object defined in ES5,\n        //    15.3.4.5.\n        // c. Let bf be the result of calling the [[Call]] internal method of\n        //    bind with F as the this value and an argument list containing\n        //    the single item this.\n        var bf = fnBind.call(F, this);\n        // d. Set the [[boundFormat]] internal property of this NumberFormat\n        //    object to bf.\n        internal['[[boundFormat]]'] = bf;\n    }\n    // Return the value of the [[boundFormat]] internal property of this\n    // NumberFormat object.\n    return internal['[[boundFormat]]'];\n}\n\nfunction formatToParts$1() {\n    var date = arguments.length <= 0 || arguments[0] === undefined ? undefined : arguments[0];\n\n    var internal = this !== null && babelHelpers$1[\"typeof\"](this) === 'object' && getInternalProperties(this);\n\n    if (!internal || !internal['[[initializedDateTimeFormat]]']) throw new TypeError('`this` value for formatToParts() is not an initialized Intl.DateTimeFormat object.');\n\n    var x = date === undefined ? Date.now() : toNumber(date);\n    return FormatToPartsDateTime(this, x);\n}\n\nObject.defineProperty(Intl.DateTimeFormat.prototype, 'formatToParts', {\n    enumerable: false,\n    writable: true,\n    configurable: true,\n    value: formatToParts$1\n});\n\nfunction CreateDateTimeParts(dateTimeFormat, x) {\n    // 1. If x is not a finite Number, then throw a RangeError exception.\n    if (!isFinite(x)) throw new RangeError('Invalid valid date passed to format');\n\n    var internal = dateTimeFormat.__getInternalProperties(secret);\n\n    // Creating restore point for properties on the RegExp object... please wait\n    /* let regexpRestore = */createRegExpRestore(); // ###TODO: review this\n\n    // 2. Let locale be the value of the [[locale]] internal property of dateTimeFormat.\n    var locale = internal['[[locale]]'];\n\n    // 3. Let nf be the result of creating a new NumberFormat object as if by the\n    // expression new Intl.NumberFormat([locale], {useGrouping: false}) where\n    // Intl.NumberFormat is the standard built-in constructor defined in 11.1.3.\n    var nf = new Intl.NumberFormat([locale], { useGrouping: false });\n\n    // 4. Let nf2 be the result of creating a new NumberFormat object as if by the\n    // expression new Intl.NumberFormat([locale], {minimumIntegerDigits: 2, useGrouping:\n    // false}) where Intl.NumberFormat is the standard built-in constructor defined in\n    // 11.1.3.\n    var nf2 = new Intl.NumberFormat([locale], { minimumIntegerDigits: 2, useGrouping: false });\n\n    // 5. Let tm be the result of calling the ToLocalTime abstract operation (defined\n    // below) with x, the value of the [[calendar]] internal property of dateTimeFormat,\n    // and the value of the [[timeZone]] internal property of dateTimeFormat.\n    var tm = ToLocalTime(x, internal['[[calendar]]'], internal['[[timeZone]]']);\n\n    // 6. Let result be the value of the [[pattern]] internal property of dateTimeFormat.\n    var pattern = internal['[[pattern]]'];\n\n    // 7.\n    var result = new List();\n\n    // 8.\n    var index = 0;\n\n    // 9.\n    var beginIndex = pattern.indexOf('{');\n\n    // 10.\n    var endIndex = 0;\n\n    // Need the locale minus any extensions\n    var dataLocale = internal['[[dataLocale]]'];\n\n    // Need the calendar data from CLDR\n    var localeData = internals.DateTimeFormat['[[localeData]]'][dataLocale].calendars;\n    var ca = internal['[[calendar]]'];\n\n    // 11.\n    while (beginIndex !== -1) {\n        var fv = void 0;\n        // a.\n        endIndex = pattern.indexOf('}', beginIndex);\n        // b.\n        if (endIndex === -1) {\n            throw new Error('Unclosed pattern');\n        }\n        // c.\n        if (beginIndex > index) {\n            arrPush.call(result, {\n                type: 'literal',\n                value: pattern.substring(index, beginIndex)\n            });\n        }\n        // d.\n        var p = pattern.substring(beginIndex + 1, endIndex);\n        // e.\n        if (dateTimeComponents.hasOwnProperty(p)) {\n            //   i. Let f be the value of the [[<p>]] internal property of dateTimeFormat.\n            var f = internal['[[' + p + ']]'];\n            //  ii. Let v be the value of tm.[[<p>]].\n            var v = tm['[[' + p + ']]'];\n            // iii. If p is \"year\" and v ≤ 0, then let v be 1 - v.\n            if (p === 'year' && v <= 0) {\n                v = 1 - v;\n            }\n            //  iv. If p is \"month\", then increase v by 1.\n            else if (p === 'month') {\n                    v++;\n                }\n                //   v. If p is \"hour\" and the value of the [[hour12]] internal property of\n                //      dateTimeFormat is true, then\n                else if (p === 'hour' && internal['[[hour12]]'] === true) {\n                        // 1. Let v be v modulo 12.\n                        v = v % 12;\n                        // 2. If v is 0 and the value of the [[hourNo0]] internal property of\n                        //    dateTimeFormat is true, then let v be 12.\n                        if (v === 0 && internal['[[hourNo0]]'] === true) {\n                            v = 12;\n                        }\n                    }\n\n            //  vi. If f is \"numeric\", then\n            if (f === 'numeric') {\n                // 1. Let fv be the result of calling the FormatNumber abstract operation\n                //    (defined in 11.3.2) with arguments nf and v.\n                fv = FormatNumber(nf, v);\n            }\n            // vii. Else if f is \"2-digit\", then\n            else if (f === '2-digit') {\n                    // 1. Let fv be the result of calling the FormatNumber abstract operation\n                    //    with arguments nf2 and v.\n                    fv = FormatNumber(nf2, v);\n                    // 2. If the length of fv is greater than 2, let fv be the substring of fv\n                    //    containing the last two characters.\n                    if (fv.length > 2) {\n                        fv = fv.slice(-2);\n                    }\n                }\n                // viii. Else if f is \"narrow\", \"short\", or \"long\", then let fv be a String\n                //     value representing f in the desired form; the String value depends upon\n                //     the implementation and the effective locale and calendar of\n                //     dateTimeFormat. If p is \"month\", then the String value may also depend\n                //     on whether dateTimeFormat has a [[day]] internal property. If p is\n                //     \"timeZoneName\", then the String value may also depend on the value of\n                //     the [[inDST]] field of tm.\n                else if (f in dateWidths) {\n                        switch (p) {\n                            case 'month':\n                                fv = resolveDateString(localeData, ca, 'months', f, tm['[[' + p + ']]']);\n                                break;\n\n                            case 'weekday':\n                                try {\n                                    fv = resolveDateString(localeData, ca, 'days', f, tm['[[' + p + ']]']);\n                                    // fv = resolveDateString(ca.days, f)[tm['[['+ p +']]']];\n                                } catch (e) {\n                                    throw new Error('Could not find weekday data for locale ' + locale);\n                                }\n                                break;\n\n                            case 'timeZoneName':\n                                fv = ''; // ###TODO\n                                break;\n\n                            case 'era':\n                                try {\n                                    fv = resolveDateString(localeData, ca, 'eras', f, tm['[[' + p + ']]']);\n                                } catch (e) {\n                                    throw new Error('Could not find era data for locale ' + locale);\n                                }\n                                break;\n\n                            default:\n                                fv = tm['[[' + p + ']]'];\n                        }\n                    }\n            // ix\n            arrPush.call(result, {\n                type: p,\n                value: fv\n            });\n            // f.\n        } else if (p === 'ampm') {\n            // i.\n            var _v = tm['[[hour]]'];\n            // ii./iii.\n            fv = resolveDateString(localeData, ca, 'dayPeriods', _v > 11 ? 'pm' : 'am', null);\n            // iv.\n            arrPush.call(result, {\n                type: 'dayPeriod',\n                value: fv\n            });\n            // g.\n        } else {\n            arrPush.call(result, {\n                type: 'literal',\n                value: pattern.substring(beginIndex, endIndex + 1)\n            });\n        }\n        // h.\n        index = endIndex + 1;\n        // i.\n        beginIndex = pattern.indexOf('{', index);\n    }\n    // 12.\n    if (endIndex < pattern.length - 1) {\n        arrPush.call(result, {\n            type: 'literal',\n            value: pattern.substr(endIndex + 1)\n        });\n    }\n    // 13.\n    return result;\n}\n\n/**\n * When the FormatDateTime abstract operation is called with arguments dateTimeFormat\n * (which must be an object initialized as a DateTimeFormat) and x (which must be a Number\n * value), it returns a String value representing x (interpreted as a time value as\n * specified in ES5, 15.9.1.1) according to the effective locale and the formatting\n * options of dateTimeFormat.\n */\nfunction FormatDateTime(dateTimeFormat, x) {\n    var parts = CreateDateTimeParts(dateTimeFormat, x);\n    var result = '';\n\n    for (var i = 0; parts.length > i; i++) {\n        var part = parts[i];\n        result += part.value;\n    }\n    return result;\n}\n\nfunction FormatToPartsDateTime(dateTimeFormat, x) {\n    var parts = CreateDateTimeParts(dateTimeFormat, x);\n    var result = [];\n    for (var i = 0; parts.length > i; i++) {\n        var part = parts[i];\n        result.push({\n            type: part.type,\n            value: part.value\n        });\n    }\n    return result;\n}\n\n/**\n * When the ToLocalTime abstract operation is called with arguments date, calendar, and\n * timeZone, the following steps are taken:\n */\nfunction ToLocalTime(date, calendar, timeZone) {\n    // 1. Apply calendrical calculations on date for the given calendar and time zone to\n    //    produce weekday, era, year, month, day, hour, minute, second, and inDST values.\n    //    The calculations should use best available information about the specified\n    //    calendar and time zone. If the calendar is \"gregory\", then the calculations must\n    //    match the algorithms specified in ES5, 15.9.1, except that calculations are not\n    //    bound by the restrictions on the use of best available information on time zones\n    //    for local time zone adjustment and daylight saving time adjustment imposed by\n    //    ES5, 15.9.1.7 and 15.9.1.8.\n    // ###TODO###\n    var d = new Date(date),\n        m = 'get' + (timeZone || '');\n\n    // 2. Return a Record with fields [[weekday]], [[era]], [[year]], [[month]], [[day]],\n    //    [[hour]], [[minute]], [[second]], and [[inDST]], each with the corresponding\n    //    calculated value.\n    return new Record({\n        '[[weekday]]': d[m + 'Day'](),\n        '[[era]]': +(d[m + 'FullYear']() >= 0),\n        '[[year]]': d[m + 'FullYear'](),\n        '[[month]]': d[m + 'Month'](),\n        '[[day]]': d[m + 'Date'](),\n        '[[hour]]': d[m + 'Hours'](),\n        '[[minute]]': d[m + 'Minutes'](),\n        '[[second]]': d[m + 'Seconds'](),\n        '[[inDST]]': false // ###TODO###\n    });\n}\n\n/**\n * The function returns a new object whose properties and attributes are set as if\n * constructed by an object literal assigning to each of the following properties the\n * value of the corresponding internal property of this DateTimeFormat object (see 12.4):\n * locale, calendar, numberingSystem, timeZone, hour12, weekday, era, year, month, day,\n * hour, minute, second, and timeZoneName. Properties whose corresponding internal\n * properties are not present are not assigned.\n */\n/* 12.3.3 */defineProperty(Intl.DateTimeFormat.prototype, 'resolvedOptions', {\n    writable: true,\n    configurable: true,\n    value: function value() {\n        var prop = void 0,\n            descs = new Record(),\n            props = ['locale', 'calendar', 'numberingSystem', 'timeZone', 'hour12', 'weekday', 'era', 'year', 'month', 'day', 'hour', 'minute', 'second', 'timeZoneName'],\n            internal = this !== null && babelHelpers$1[\"typeof\"](this) === 'object' && getInternalProperties(this);\n\n        // Satisfy test 12.3_b\n        if (!internal || !internal['[[initializedDateTimeFormat]]']) throw new TypeError('`this` value for resolvedOptions() is not an initialized Intl.DateTimeFormat object.');\n\n        for (var i = 0, max = props.length; i < max; i++) {\n            if (hop.call(internal, prop = '[[' + props[i] + ']]')) descs[props[i]] = { value: internal[prop], writable: true, configurable: true, enumerable: true };\n        }\n\n        return objCreate({}, descs);\n    }\n});\n\nvar ls = Intl.__localeSensitiveProtos = {\n    Number: {},\n    Date: {}\n};\n\n/**\n * When the toLocaleString method is called with optional arguments locales and options,\n * the following steps are taken:\n */\n/* 13.2.1 */ls.Number.toLocaleString = function () {\n    // Satisfy test 13.2.1_1\n    if (Object.prototype.toString.call(this) !== '[object Number]') throw new TypeError('`this` value must be a number for Number.prototype.toLocaleString()');\n\n    // 1. Let x be this Number value (as defined in ES5, 15.7.4).\n    // 2. If locales is not provided, then let locales be undefined.\n    // 3. If options is not provided, then let options be undefined.\n    // 4. Let numberFormat be the result of creating a new object as if by the\n    //    expression new Intl.NumberFormat(locales, options) where\n    //    Intl.NumberFormat is the standard built-in constructor defined in 11.1.3.\n    // 5. Return the result of calling the FormatNumber abstract operation\n    //    (defined in 11.3.2) with arguments numberFormat and x.\n    return FormatNumber(new NumberFormatConstructor(arguments[0], arguments[1]), this);\n};\n\n/**\n * When the toLocaleString method is called with optional arguments locales and options,\n * the following steps are taken:\n */\n/* 13.3.1 */ls.Date.toLocaleString = function () {\n    // Satisfy test 13.3.0_1\n    if (Object.prototype.toString.call(this) !== '[object Date]') throw new TypeError('`this` value must be a Date instance for Date.prototype.toLocaleString()');\n\n    // 1. Let x be this time value (as defined in ES5, 15.9.5).\n    var x = +this;\n\n    // 2. If x is NaN, then return \"Invalid Date\".\n    if (isNaN(x)) return 'Invalid Date';\n\n    // 3. If locales is not provided, then let locales be undefined.\n    var locales = arguments[0];\n\n    // 4. If options is not provided, then let options be undefined.\n    var options = arguments[1];\n\n    // 5. Let options be the result of calling the ToDateTimeOptions abstract\n    //    operation (defined in 12.1.1) with arguments options, \"any\", and \"all\".\n    options = ToDateTimeOptions(options, 'any', 'all');\n\n    // 6. Let dateTimeFormat be the result of creating a new object as if by the\n    //    expression new Intl.DateTimeFormat(locales, options) where\n    //    Intl.DateTimeFormat is the standard built-in constructor defined in 12.1.3.\n    var dateTimeFormat = new DateTimeFormatConstructor(locales, options);\n\n    // 7. Return the result of calling the FormatDateTime abstract operation (defined\n    //    in 12.3.2) with arguments dateTimeFormat and x.\n    return FormatDateTime(dateTimeFormat, x);\n};\n\n/**\n * When the toLocaleDateString method is called with optional arguments locales and\n * options, the following steps are taken:\n */\n/* 13.3.2 */ls.Date.toLocaleDateString = function () {\n    // Satisfy test 13.3.0_1\n    if (Object.prototype.toString.call(this) !== '[object Date]') throw new TypeError('`this` value must be a Date instance for Date.prototype.toLocaleDateString()');\n\n    // 1. Let x be this time value (as defined in ES5, 15.9.5).\n    var x = +this;\n\n    // 2. If x is NaN, then return \"Invalid Date\".\n    if (isNaN(x)) return 'Invalid Date';\n\n    // 3. If locales is not provided, then let locales be undefined.\n    var locales = arguments[0],\n\n\n    // 4. If options is not provided, then let options be undefined.\n    options = arguments[1];\n\n    // 5. Let options be the result of calling the ToDateTimeOptions abstract\n    //    operation (defined in 12.1.1) with arguments options, \"date\", and \"date\".\n    options = ToDateTimeOptions(options, 'date', 'date');\n\n    // 6. Let dateTimeFormat be the result of creating a new object as if by the\n    //    expression new Intl.DateTimeFormat(locales, options) where\n    //    Intl.DateTimeFormat is the standard built-in constructor defined in 12.1.3.\n    var dateTimeFormat = new DateTimeFormatConstructor(locales, options);\n\n    // 7. Return the result of calling the FormatDateTime abstract operation (defined\n    //    in 12.3.2) with arguments dateTimeFormat and x.\n    return FormatDateTime(dateTimeFormat, x);\n};\n\n/**\n * When the toLocaleTimeString method is called with optional arguments locales and\n * options, the following steps are taken:\n */\n/* 13.3.3 */ls.Date.toLocaleTimeString = function () {\n    // Satisfy test 13.3.0_1\n    if (Object.prototype.toString.call(this) !== '[object Date]') throw new TypeError('`this` value must be a Date instance for Date.prototype.toLocaleTimeString()');\n\n    // 1. Let x be this time value (as defined in ES5, 15.9.5).\n    var x = +this;\n\n    // 2. If x is NaN, then return \"Invalid Date\".\n    if (isNaN(x)) return 'Invalid Date';\n\n    // 3. If locales is not provided, then let locales be undefined.\n    var locales = arguments[0];\n\n    // 4. If options is not provided, then let options be undefined.\n    var options = arguments[1];\n\n    // 5. Let options be the result of calling the ToDateTimeOptions abstract\n    //    operation (defined in 12.1.1) with arguments options, \"time\", and \"time\".\n    options = ToDateTimeOptions(options, 'time', 'time');\n\n    // 6. Let dateTimeFormat be the result of creating a new object as if by the\n    //    expression new Intl.DateTimeFormat(locales, options) where\n    //    Intl.DateTimeFormat is the standard built-in constructor defined in 12.1.3.\n    var dateTimeFormat = new DateTimeFormatConstructor(locales, options);\n\n    // 7. Return the result of calling the FormatDateTime abstract operation (defined\n    //    in 12.3.2) with arguments dateTimeFormat and x.\n    return FormatDateTime(dateTimeFormat, x);\n};\n\ndefineProperty(Intl, '__applyLocaleSensitivePrototypes', {\n    writable: true,\n    configurable: true,\n    value: function value() {\n        defineProperty(Number.prototype, 'toLocaleString', { writable: true, configurable: true, value: ls.Number.toLocaleString });\n        // Need this here for IE 8, to avoid the _DontEnum_ bug\n        defineProperty(Date.prototype, 'toLocaleString', { writable: true, configurable: true, value: ls.Date.toLocaleString });\n\n        for (var k in ls.Date) {\n            if (hop.call(ls.Date, k)) defineProperty(Date.prototype, k, { writable: true, configurable: true, value: ls.Date[k] });\n        }\n    }\n});\n\n/**\n * Can't really ship a single script with data for hundreds of locales, so we provide\n * this __addLocaleData method as a means for the developer to add the data on an\n * as-needed basis\n */\ndefineProperty(Intl, '__addLocaleData', {\n    value: function value(data) {\n        if (!IsStructurallyValidLanguageTag(data.locale)) throw new Error(\"Object passed doesn't identify itself with a valid language tag\");\n\n        addLocaleData(data, data.locale);\n    }\n});\n\nfunction addLocaleData(data, tag) {\n    // Both NumberFormat and DateTimeFormat require number data, so throw if it isn't present\n    if (!data.number) throw new Error(\"Object passed doesn't contain locale data for Intl.NumberFormat\");\n\n    var locale = void 0,\n        locales = [tag],\n        parts = tag.split('-');\n\n    // Create fallbacks for locale data with scripts, e.g. Latn, Hans, Vaii, etc\n    if (parts.length > 2 && parts[1].length === 4) arrPush.call(locales, parts[0] + '-' + parts[2]);\n\n    while (locale = arrShift.call(locales)) {\n        // Add to NumberFormat internal properties as per 11.2.3\n        arrPush.call(internals.NumberFormat['[[availableLocales]]'], locale);\n        internals.NumberFormat['[[localeData]]'][locale] = data.number;\n\n        // ...and DateTimeFormat internal properties as per 12.2.3\n        if (data.date) {\n            data.date.nu = data.number.nu;\n            arrPush.call(internals.DateTimeFormat['[[availableLocales]]'], locale);\n            internals.DateTimeFormat['[[localeData]]'][locale] = data.date;\n        }\n    }\n\n    // If this is the first set of locale data added, make it the default\n    if (defaultLocale === undefined) setDefaultLocale(tag);\n}\n\ndefineProperty(Intl, '__disableRegExpRestore', {\n    value: function value() {\n        internals.disableRegExpRestore = true;\n    }\n});\n\nmodule.exports = Intl;","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n"],"sourceRoot":""}